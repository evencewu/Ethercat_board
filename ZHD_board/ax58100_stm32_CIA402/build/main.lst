ARM GAS  /tmp/ccTGKR4P.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.MX_GPIO_Init,"ax",%progbits
  20              		.align	1
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	MX_GPIO_Init:
  26              	.LFB139:
  27              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****  ******************************************************************************
   4:Core/Src/main.c ****  * @file           : main.c
   5:Core/Src/main.c ****  * @brief          : Main program body
   6:Core/Src/main.c ****  ******************************************************************************
   7:Core/Src/main.c ****  * @attention
   8:Core/Src/main.c ****  *
   9:Core/Src/main.c ****  * Copyright (c) 2023 STMicroelectronics.
  10:Core/Src/main.c ****  * All rights reserved.
  11:Core/Src/main.c ****  *
  12:Core/Src/main.c ****  * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****  * in the root directory of this software component.
  14:Core/Src/main.c ****  * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****  *
  16:Core/Src/main.c ****  ******************************************************************************
  17:Core/Src/main.c ****  */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "cmsis_os.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** #include "esc.h"
  27:Core/Src/main.c **** #include "ecat_slv.h"
  28:Core/Src/main.c **** #include "ecatapp.h"
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* USER CODE END Includes */
  31:Core/Src/main.c **** 
ARM GAS  /tmp/ccTGKR4P.s 			page 2


  32:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  33:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* USER CODE END PTD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  38:Core/Src/main.c **** /* USER CODE BEGIN PD */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* USER CODE END PD */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  43:Core/Src/main.c **** /* USER CODE BEGIN PM */
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* USER CODE END PM */
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  48:Core/Src/main.c **** SPI_HandleTypeDef hspi2;
  49:Core/Src/main.c **** DMA_HandleTypeDef hdma_spi2_rx;
  50:Core/Src/main.c **** DMA_HandleTypeDef hdma_spi2_tx;
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* Definitions for ledTask */
  53:Core/Src/main.c **** osThreadId_t ledTaskHandle;
  54:Core/Src/main.c **** const osThreadAttr_t ledTask_attributes = {
  55:Core/Src/main.c ****     .name = "ledTask",
  56:Core/Src/main.c ****     .stack_size = 128 * 4,
  57:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityNormal,
  58:Core/Src/main.c **** };
  59:Core/Src/main.c **** /* USER CODE BEGIN PV */
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** /* USER CODE END PV */
  62:Core/Src/main.c **** 
  63:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  64:Core/Src/main.c **** void SystemClock_Config(void);
  65:Core/Src/main.c **** static void MX_GPIO_Init(void);
  66:Core/Src/main.c **** static void MX_DMA_Init(void);
  67:Core/Src/main.c **** static void MX_SPI2_Init(void);
  68:Core/Src/main.c **** void LedTask(void *argument);
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  71:Core/Src/main.c **** 
  72:Core/Src/main.c **** /* USER CODE END PFP */
  73:Core/Src/main.c **** 
  74:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  75:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  76:Core/Src/main.c **** void ecatapp_loop(void)
  77:Core/Src/main.c **** {
  78:Core/Src/main.c ****   // stack in mixed mode
  79:Core/Src/main.c ****   if (sync0_irq_flag)
  80:Core/Src/main.c ****   {
  81:Core/Src/main.c ****     ESC_updateALevent();
  82:Core/Src/main.c ****     DIG_process(DIG_PROCESS_APP_HOOK_FLAG | DIG_PROCESS_INPUTS_FLAG);
  83:Core/Src/main.c ****     sync0_irq_flag = 0;
  84:Core/Src/main.c ****   }
  85:Core/Src/main.c ****   if (pdi_irq_flag)
  86:Core/Src/main.c ****   {
  87:Core/Src/main.c ****     ESC_updateALevent();
  88:Core/Src/main.c ****     if (ESCvar.dcsync)
ARM GAS  /tmp/ccTGKR4P.s 			page 3


  89:Core/Src/main.c ****     {
  90:Core/Src/main.c ****       DIG_process(DIG_PROCESS_OUTPUTS_FLAG);
  91:Core/Src/main.c ****     }
  92:Core/Src/main.c ****     else
  93:Core/Src/main.c ****     {
  94:Core/Src/main.c ****       DIG_process(DIG_PROCESS_OUTPUTS_FLAG | DIG_PROCESS_APP_HOOK_FLAG | DIG_PROCESS_INPUTS_FLAG);
  95:Core/Src/main.c ****     }
  96:Core/Src/main.c ****     pdi_irq_flag = 0;
  97:Core/Src/main.c ****   }
  98:Core/Src/main.c ****   else
  99:Core/Src/main.c ****   {
 100:Core/Src/main.c ****     // ecat_slv_worker(ESCREG_ALEVENT_CONTROL | ESCREG_ALEVENT_SMCHANGE
 101:Core/Src/main.c ****     //                 | ESCREG_ALEVENT_SM0 | ESCREG_ALEVENT_SM1);
 102:Core/Src/main.c **** 
 103:Core/Src/main.c ****     //HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 104:Core/Src/main.c ****     //osDelay(10);
 105:Core/Src/main.c ****     //HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 106:Core/Src/main.c ****     //osDelay(10);
 107:Core/Src/main.c ****     ecat_slv_poll();
 108:Core/Src/main.c ****     DIG_process(DIG_PROCESS_WD_FLAG);
 109:Core/Src/main.c ****   }
 110:Core/Src/main.c **** }
 111:Core/Src/main.c **** /* USER CODE END 0 */
 112:Core/Src/main.c **** 
 113:Core/Src/main.c **** /**
 114:Core/Src/main.c ****  * @brief  The application entry point.
 115:Core/Src/main.c ****  * @retval int
 116:Core/Src/main.c ****  */
 117:Core/Src/main.c **** int main(void)
 118:Core/Src/main.c **** {
 119:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 120:Core/Src/main.c **** 
 121:Core/Src/main.c ****   /* USER CODE END 1 */
 122:Core/Src/main.c **** 
 123:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 124:Core/Src/main.c **** 
 125:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 126:Core/Src/main.c ****   HAL_Init();
 127:Core/Src/main.c **** 
 128:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 129:Core/Src/main.c **** 
 130:Core/Src/main.c ****   /* USER CODE END Init */
 131:Core/Src/main.c **** 
 132:Core/Src/main.c ****   /* Configure the system clock */
 133:Core/Src/main.c ****   SystemClock_Config();
 134:Core/Src/main.c **** 
 135:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 136:Core/Src/main.c **** 
 137:Core/Src/main.c ****   /* USER CODE END SysInit */
 138:Core/Src/main.c **** 
 139:Core/Src/main.c ****   /* Initialize all configured peripherals */
 140:Core/Src/main.c ****   MX_GPIO_Init();
 141:Core/Src/main.c ****   MX_DMA_Init();
 142:Core/Src/main.c ****   MX_SPI2_Init();
 143:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 144:Core/Src/main.c ****  
 145:Core/Src/main.c ****   /* USER CODE END 2 */
ARM GAS  /tmp/ccTGKR4P.s 			page 4


 146:Core/Src/main.c **** 
 147:Core/Src/main.c ****   /* Init scheduler */
 148:Core/Src/main.c ****   osKernelInitialize();
 149:Core/Src/main.c **** 
 150:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 151:Core/Src/main.c ****   /* add mutexes, ... */
 152:Core/Src/main.c ****   /* USER CODE END RTOS_MUTEX */
 153:Core/Src/main.c **** 
 154:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 155:Core/Src/main.c ****   /* add semaphores, ... */
 156:Core/Src/main.c ****   /* USER CODE END RTOS_SEMAPHORES */
 157:Core/Src/main.c **** 
 158:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 159:Core/Src/main.c ****   /* start timers, add new ones, ... */
 160:Core/Src/main.c ****   /* USER CODE END RTOS_TIMERS */
 161:Core/Src/main.c **** 
 162:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 163:Core/Src/main.c ****   /* add queues, ... */
 164:Core/Src/main.c ****   /* USER CODE END RTOS_QUEUES */
 165:Core/Src/main.c **** 
 166:Core/Src/main.c ****   /* Create the thread(s) */
 167:Core/Src/main.c ****   /* creation of ledTask */
 168:Core/Src/main.c ****   ledTaskHandle = osThreadNew(LedTask, NULL, &ledTask_attributes);
 169:Core/Src/main.c **** 
 170:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_THREADS */
 171:Core/Src/main.c ****   /* add threads, ... */
 172:Core/Src/main.c ****   /* USER CODE END RTOS_THREADS */
 173:Core/Src/main.c **** 
 174:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_EVENTS */
 175:Core/Src/main.c ****   /* add events, ... */
 176:Core/Src/main.c ****   /* USER CODE END RTOS_EVENTS */
 177:Core/Src/main.c **** 
 178:Core/Src/main.c ****   /* Start scheduler */
 179:Core/Src/main.c ****   osKernelStart();
 180:Core/Src/main.c **** 
 181:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 182:Core/Src/main.c ****   /* Infinite loop */
 183:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 184:Core/Src/main.c ****   while (1)
 185:Core/Src/main.c ****   {
 186:Core/Src/main.c ****     /* USER CODE END WHILE */
 187:Core/Src/main.c ****     
 188:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 189:Core/Src/main.c ****   }
 190:Core/Src/main.c ****   /* USER CODE END 3 */
 191:Core/Src/main.c **** }
 192:Core/Src/main.c **** 
 193:Core/Src/main.c **** /**
 194:Core/Src/main.c ****  * @brief System Clock Configuration
 195:Core/Src/main.c ****  * @retval None
 196:Core/Src/main.c ****  */
 197:Core/Src/main.c **** void SystemClock_Config(void)
 198:Core/Src/main.c **** {
 199:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 200:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 201:Core/Src/main.c **** 
 202:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
ARM GAS  /tmp/ccTGKR4P.s 			page 5


 203:Core/Src/main.c ****    */
 204:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 205:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 206:Core/Src/main.c **** 
 207:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 208:Core/Src/main.c ****    * in the RCC_OscInitTypeDef structure.
 209:Core/Src/main.c ****    */
 210:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 211:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 212:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 213:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 214:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 215:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 216:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 217:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 218:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 219:Core/Src/main.c ****   {
 220:Core/Src/main.c ****     Error_Handler();
 221:Core/Src/main.c ****   }
 222:Core/Src/main.c **** 
 223:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 224:Core/Src/main.c ****    */
 225:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | R
 226:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 227:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 228:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 229:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 230:Core/Src/main.c **** 
 231:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 232:Core/Src/main.c ****   {
 233:Core/Src/main.c ****     Error_Handler();
 234:Core/Src/main.c ****   }
 235:Core/Src/main.c **** }
 236:Core/Src/main.c **** 
 237:Core/Src/main.c **** /**
 238:Core/Src/main.c ****  * @brief SPI2 Initialization Function
 239:Core/Src/main.c ****  * @param None
 240:Core/Src/main.c ****  * @retval None
 241:Core/Src/main.c ****  */
 242:Core/Src/main.c **** static void MX_SPI2_Init(void)
 243:Core/Src/main.c **** {
 244:Core/Src/main.c **** 
 245:Core/Src/main.c ****   /* USER CODE BEGIN SPI2_Init 0 */
 246:Core/Src/main.c **** 
 247:Core/Src/main.c ****   /* USER CODE END SPI2_Init 0 */
 248:Core/Src/main.c **** 
 249:Core/Src/main.c ****   /* USER CODE BEGIN SPI2_Init 1 */
 250:Core/Src/main.c **** 
 251:Core/Src/main.c ****   /* USER CODE END SPI2_Init 1 */
 252:Core/Src/main.c ****   /* SPI2 parameter configuration*/
 253:Core/Src/main.c ****   hspi2.Instance = SPI2;
 254:Core/Src/main.c ****   hspi2.Init.Mode = SPI_MODE_MASTER;
 255:Core/Src/main.c ****   hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 256:Core/Src/main.c ****   hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 257:Core/Src/main.c ****   hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 258:Core/Src/main.c ****   hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 259:Core/Src/main.c ****   hspi2.Init.NSS = SPI_NSS_SOFT;
ARM GAS  /tmp/ccTGKR4P.s 			page 6


 260:Core/Src/main.c ****   hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 261:Core/Src/main.c ****   hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 262:Core/Src/main.c ****   hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 263:Core/Src/main.c ****   hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 264:Core/Src/main.c ****   hspi2.Init.CRCPolynomial = 128;
 265:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi2) != HAL_OK)
 266:Core/Src/main.c ****   {
 267:Core/Src/main.c ****     Error_Handler();
 268:Core/Src/main.c ****   }
 269:Core/Src/main.c ****   /* USER CODE BEGIN SPI2_Init 2 */
 270:Core/Src/main.c **** 
 271:Core/Src/main.c ****   /* USER CODE END SPI2_Init 2 */
 272:Core/Src/main.c **** }
 273:Core/Src/main.c **** 
 274:Core/Src/main.c **** /**
 275:Core/Src/main.c ****  * Enable DMA controller clock
 276:Core/Src/main.c ****  */
 277:Core/Src/main.c **** static void MX_DMA_Init(void)
 278:Core/Src/main.c **** {
 279:Core/Src/main.c **** 
 280:Core/Src/main.c ****   /* DMA controller clock enable */
 281:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 282:Core/Src/main.c **** 
 283:Core/Src/main.c ****   /* DMA interrupt init */
 284:Core/Src/main.c ****   /* DMA1_Stream3_IRQn interrupt configuration */
 285:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 286:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 287:Core/Src/main.c ****   /* DMA1_Stream4_IRQn interrupt configuration */
 288:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 289:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 290:Core/Src/main.c **** }
 291:Core/Src/main.c **** 
 292:Core/Src/main.c **** /**
 293:Core/Src/main.c ****  * @brief GPIO Initialization Function
 294:Core/Src/main.c ****  * @param None
 295:Core/Src/main.c ****  * @retval None
 296:Core/Src/main.c ****  */
 297:Core/Src/main.c **** static void MX_GPIO_Init(void)
 298:Core/Src/main.c **** {
  28              		.loc 1 298 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  33              		.cfi_def_cfa_offset 20
  34              		.cfi_offset 4, -20
  35              		.cfi_offset 5, -16
  36              		.cfi_offset 6, -12
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 8BB0     		sub	sp, sp, #44
  40              		.cfi_def_cfa_offset 64
 299:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 299 3 view .LVU1
  42              		.loc 1 299 20 is_stmt 0 view .LVU2
  43 0004 0024     		movs	r4, #0
  44 0006 0594     		str	r4, [sp, #20]
ARM GAS  /tmp/ccTGKR4P.s 			page 7


  45 0008 0694     		str	r4, [sp, #24]
  46 000a 0794     		str	r4, [sp, #28]
  47 000c 0894     		str	r4, [sp, #32]
  48 000e 0994     		str	r4, [sp, #36]
 300:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_1 */
 301:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_1 */
 302:Core/Src/main.c **** 
 303:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 304:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  49              		.loc 1 304 3 is_stmt 1 view .LVU3
  50              	.LBB4:
  51              		.loc 1 304 3 view .LVU4
  52 0010 0194     		str	r4, [sp, #4]
  53              		.loc 1 304 3 view .LVU5
  54 0012 304B     		ldr	r3, .L3
  55 0014 1A6B     		ldr	r2, [r3, #48]
  56 0016 42F08002 		orr	r2, r2, #128
  57 001a 1A63     		str	r2, [r3, #48]
  58              		.loc 1 304 3 view .LVU6
  59 001c 1A6B     		ldr	r2, [r3, #48]
  60 001e 02F08002 		and	r2, r2, #128
  61 0022 0192     		str	r2, [sp, #4]
  62              		.loc 1 304 3 view .LVU7
  63 0024 019A     		ldr	r2, [sp, #4]
  64              	.LBE4:
  65              		.loc 1 304 3 view .LVU8
 305:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  66              		.loc 1 305 3 view .LVU9
  67              	.LBB5:
  68              		.loc 1 305 3 view .LVU10
  69 0026 0294     		str	r4, [sp, #8]
  70              		.loc 1 305 3 view .LVU11
  71 0028 1A6B     		ldr	r2, [r3, #48]
  72 002a 42F00402 		orr	r2, r2, #4
  73 002e 1A63     		str	r2, [r3, #48]
  74              		.loc 1 305 3 view .LVU12
  75 0030 1A6B     		ldr	r2, [r3, #48]
  76 0032 02F00402 		and	r2, r2, #4
  77 0036 0292     		str	r2, [sp, #8]
  78              		.loc 1 305 3 view .LVU13
  79 0038 029A     		ldr	r2, [sp, #8]
  80              	.LBE5:
  81              		.loc 1 305 3 view .LVU14
 306:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  82              		.loc 1 306 3 view .LVU15
  83              	.LBB6:
  84              		.loc 1 306 3 view .LVU16
  85 003a 0394     		str	r4, [sp, #12]
  86              		.loc 1 306 3 view .LVU17
  87 003c 1A6B     		ldr	r2, [r3, #48]
  88 003e 42F00102 		orr	r2, r2, #1
  89 0042 1A63     		str	r2, [r3, #48]
  90              		.loc 1 306 3 view .LVU18
  91 0044 1A6B     		ldr	r2, [r3, #48]
  92 0046 02F00102 		and	r2, r2, #1
  93 004a 0392     		str	r2, [sp, #12]
  94              		.loc 1 306 3 view .LVU19
ARM GAS  /tmp/ccTGKR4P.s 			page 8


  95 004c 039A     		ldr	r2, [sp, #12]
  96              	.LBE6:
  97              		.loc 1 306 3 view .LVU20
 307:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  98              		.loc 1 307 3 view .LVU21
  99              	.LBB7:
 100              		.loc 1 307 3 view .LVU22
 101 004e 0494     		str	r4, [sp, #16]
 102              		.loc 1 307 3 view .LVU23
 103 0050 1A6B     		ldr	r2, [r3, #48]
 104 0052 42F00202 		orr	r2, r2, #2
 105 0056 1A63     		str	r2, [r3, #48]
 106              		.loc 1 307 3 view .LVU24
 107 0058 1B6B     		ldr	r3, [r3, #48]
 108 005a 03F00203 		and	r3, r3, #2
 109 005e 0493     		str	r3, [sp, #16]
 110              		.loc 1 307 3 view .LVU25
 111 0060 049B     		ldr	r3, [sp, #16]
 112              	.LBE7:
 113              		.loc 1 307 3 view .LVU26
 308:Core/Src/main.c **** 
 309:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 310:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, LED3_Pin | LED2_Pin | LED1_Pin | LED0_Pin | SPI2_NSS_Pin, GPIO_PIN_RESET
 114              		.loc 1 310 3 view .LVU27
 115 0062 1D4E     		ldr	r6, .L3+4
 116 0064 2246     		mov	r2, r4
 117 0066 4FF4F241 		mov	r1, #30976
 118 006a 3046     		mov	r0, r6
 119 006c FFF7FEFF 		bl	HAL_GPIO_WritePin
 120              	.LVL0:
 311:Core/Src/main.c **** 
 312:Core/Src/main.c ****   /*Configure GPIO pin : PA0 */
 313:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0;
 121              		.loc 1 313 3 view .LVU28
 122              		.loc 1 313 23 is_stmt 0 view .LVU29
 123 0070 0127     		movs	r7, #1
 124 0072 0597     		str	r7, [sp, #20]
 314:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 125              		.loc 1 314 3 is_stmt 1 view .LVU30
 126              		.loc 1 314 24 is_stmt 0 view .LVU31
 127 0074 4FF48813 		mov	r3, #1114112
 128 0078 0693     		str	r3, [sp, #24]
 315:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 129              		.loc 1 315 3 is_stmt 1 view .LVU32
 130              		.loc 1 315 24 is_stmt 0 view .LVU33
 131 007a 0794     		str	r4, [sp, #28]
 316:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 132              		.loc 1 316 3 is_stmt 1 view .LVU34
 133 007c 174D     		ldr	r5, .L3+8
 134 007e 05A9     		add	r1, sp, #20
 135 0080 2846     		mov	r0, r5
 136 0082 FFF7FEFF 		bl	HAL_GPIO_Init
 137              	.LVL1:
 317:Core/Src/main.c **** 
 318:Core/Src/main.c ****   /*Configure GPIO pins : LED3_Pin LED2_Pin LED1_Pin LED0_Pin
 319:Core/Src/main.c ****                            SPI2_NSS_Pin */
 320:Core/Src/main.c ****   GPIO_InitStruct.Pin = LED3_Pin | LED2_Pin | LED1_Pin | LED0_Pin | SPI2_NSS_Pin;
ARM GAS  /tmp/ccTGKR4P.s 			page 9


 138              		.loc 1 320 3 view .LVU35
 139              		.loc 1 320 23 is_stmt 0 view .LVU36
 140 0086 4FF4F243 		mov	r3, #30976
 141 008a 0593     		str	r3, [sp, #20]
 321:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 142              		.loc 1 321 3 is_stmt 1 view .LVU37
 143              		.loc 1 321 24 is_stmt 0 view .LVU38
 144 008c 0697     		str	r7, [sp, #24]
 322:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 145              		.loc 1 322 3 is_stmt 1 view .LVU39
 146              		.loc 1 322 24 is_stmt 0 view .LVU40
 147 008e 0794     		str	r4, [sp, #28]
 323:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 148              		.loc 1 323 3 is_stmt 1 view .LVU41
 149              		.loc 1 323 25 is_stmt 0 view .LVU42
 150 0090 0894     		str	r4, [sp, #32]
 324:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 151              		.loc 1 324 3 is_stmt 1 view .LVU43
 152 0092 05A9     		add	r1, sp, #20
 153 0094 3046     		mov	r0, r6
 154 0096 FFF7FEFF 		bl	HAL_GPIO_Init
 155              	.LVL2:
 325:Core/Src/main.c **** 
 326:Core/Src/main.c ****   /*Configure GPIO pin : SPI2_IRQ_Pin */
 327:Core/Src/main.c ****   GPIO_InitStruct.Pin = SPI2_IRQ_Pin;
 156              		.loc 1 327 3 view .LVU44
 157              		.loc 1 327 23 is_stmt 0 view .LVU45
 158 009a 4FF48073 		mov	r3, #256
 159 009e 0593     		str	r3, [sp, #20]
 328:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 160              		.loc 1 328 3 is_stmt 1 view .LVU46
 161              		.loc 1 328 24 is_stmt 0 view .LVU47
 162 00a0 4FF40413 		mov	r3, #2162688
 163 00a4 0693     		str	r3, [sp, #24]
 329:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 164              		.loc 1 329 3 is_stmt 1 view .LVU48
 165              		.loc 1 329 24 is_stmt 0 view .LVU49
 166 00a6 0794     		str	r4, [sp, #28]
 330:Core/Src/main.c ****   HAL_GPIO_Init(SPI2_IRQ_GPIO_Port, &GPIO_InitStruct);
 167              		.loc 1 330 3 is_stmt 1 view .LVU50
 168 00a8 05A9     		add	r1, sp, #20
 169 00aa 2846     		mov	r0, r5
 170 00ac FFF7FEFF 		bl	HAL_GPIO_Init
 171              	.LVL3:
 331:Core/Src/main.c **** 
 332:Core/Src/main.c ****   /* EXTI interrupt init*/
 333:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 172              		.loc 1 333 3 view .LVU51
 173 00b0 2246     		mov	r2, r4
 174 00b2 0521     		movs	r1, #5
 175 00b4 0620     		movs	r0, #6
 176 00b6 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 177              	.LVL4:
 334:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 178              		.loc 1 334 3 view .LVU52
 179 00ba 0620     		movs	r0, #6
 180 00bc FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
ARM GAS  /tmp/ccTGKR4P.s 			page 10


 181              	.LVL5:
 335:Core/Src/main.c **** 
 336:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 182              		.loc 1 336 3 view .LVU53
 183 00c0 2246     		mov	r2, r4
 184 00c2 0521     		movs	r1, #5
 185 00c4 1720     		movs	r0, #23
 186 00c6 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 187              	.LVL6:
 337:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 188              		.loc 1 337 3 view .LVU54
 189 00ca 1720     		movs	r0, #23
 190 00cc FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 191              	.LVL7:
 338:Core/Src/main.c **** 
 339:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_2 */
 340:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_2 */
 341:Core/Src/main.c **** }
 192              		.loc 1 341 1 is_stmt 0 view .LVU55
 193 00d0 0BB0     		add	sp, sp, #44
 194              		.cfi_def_cfa_offset 20
 195              		@ sp needed
 196 00d2 F0BD     		pop	{r4, r5, r6, r7, pc}
 197              	.L4:
 198              		.align	2
 199              	.L3:
 200 00d4 00380240 		.word	1073887232
 201 00d8 00040240 		.word	1073873920
 202 00dc 00000240 		.word	1073872896
 203              		.cfi_endproc
 204              	.LFE139:
 206              		.section	.text.MX_DMA_Init,"ax",%progbits
 207              		.align	1
 208              		.syntax unified
 209              		.thumb
 210              		.thumb_func
 212              	MX_DMA_Init:
 213              	.LFB138:
 278:Core/Src/main.c **** 
 214              		.loc 1 278 1 is_stmt 1 view -0
 215              		.cfi_startproc
 216              		@ args = 0, pretend = 0, frame = 8
 217              		@ frame_needed = 0, uses_anonymous_args = 0
 218 0000 10B5     		push	{r4, lr}
 219              		.cfi_def_cfa_offset 8
 220              		.cfi_offset 4, -8
 221              		.cfi_offset 14, -4
 222 0002 82B0     		sub	sp, sp, #8
 223              		.cfi_def_cfa_offset 16
 281:Core/Src/main.c **** 
 224              		.loc 1 281 3 view .LVU57
 225              	.LBB8:
 281:Core/Src/main.c **** 
 226              		.loc 1 281 3 view .LVU58
 227 0004 0024     		movs	r4, #0
 228 0006 0194     		str	r4, [sp, #4]
 281:Core/Src/main.c **** 
ARM GAS  /tmp/ccTGKR4P.s 			page 11


 229              		.loc 1 281 3 view .LVU59
 230 0008 0D4B     		ldr	r3, .L7
 231 000a 1A6B     		ldr	r2, [r3, #48]
 232 000c 42F40012 		orr	r2, r2, #2097152
 233 0010 1A63     		str	r2, [r3, #48]
 281:Core/Src/main.c **** 
 234              		.loc 1 281 3 view .LVU60
 235 0012 1B6B     		ldr	r3, [r3, #48]
 236 0014 03F40013 		and	r3, r3, #2097152
 237 0018 0193     		str	r3, [sp, #4]
 281:Core/Src/main.c **** 
 238              		.loc 1 281 3 view .LVU61
 239 001a 019B     		ldr	r3, [sp, #4]
 240              	.LBE8:
 281:Core/Src/main.c **** 
 241              		.loc 1 281 3 view .LVU62
 285:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 242              		.loc 1 285 3 view .LVU63
 243 001c 2246     		mov	r2, r4
 244 001e 0521     		movs	r1, #5
 245 0020 0E20     		movs	r0, #14
 246 0022 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 247              	.LVL8:
 286:Core/Src/main.c ****   /* DMA1_Stream4_IRQn interrupt configuration */
 248              		.loc 1 286 3 view .LVU64
 249 0026 0E20     		movs	r0, #14
 250 0028 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 251              	.LVL9:
 288:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 252              		.loc 1 288 3 view .LVU65
 253 002c 2246     		mov	r2, r4
 254 002e 0521     		movs	r1, #5
 255 0030 0F20     		movs	r0, #15
 256 0032 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 257              	.LVL10:
 289:Core/Src/main.c **** }
 258              		.loc 1 289 3 view .LVU66
 259 0036 0F20     		movs	r0, #15
 260 0038 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 261              	.LVL11:
 290:Core/Src/main.c **** 
 262              		.loc 1 290 1 is_stmt 0 view .LVU67
 263 003c 02B0     		add	sp, sp, #8
 264              		.cfi_def_cfa_offset 8
 265              		@ sp needed
 266 003e 10BD     		pop	{r4, pc}
 267              	.L8:
 268              		.align	2
 269              	.L7:
 270 0040 00380240 		.word	1073887232
 271              		.cfi_endproc
 272              	.LFE138:
 274              		.section	.text.ecatapp_loop,"ax",%progbits
 275              		.align	1
 276              		.global	ecatapp_loop
 277              		.syntax unified
 278              		.thumb
ARM GAS  /tmp/ccTGKR4P.s 			page 12


 279              		.thumb_func
 281              	ecatapp_loop:
 282              	.LFB134:
  77:Core/Src/main.c ****   // stack in mixed mode
 283              		.loc 1 77 1 is_stmt 1 view -0
 284              		.cfi_startproc
 285              		@ args = 0, pretend = 0, frame = 0
 286              		@ frame_needed = 0, uses_anonymous_args = 0
 287 0000 10B5     		push	{r4, lr}
 288              		.cfi_def_cfa_offset 8
 289              		.cfi_offset 4, -8
 290              		.cfi_offset 14, -4
  79:Core/Src/main.c ****   {
 291              		.loc 1 79 3 view .LVU69
  79:Core/Src/main.c ****   {
 292              		.loc 1 79 7 is_stmt 0 view .LVU70
 293 0002 174B     		ldr	r3, .L17
 294 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  79:Core/Src/main.c ****   {
 295              		.loc 1 79 6 view .LVU71
 296 0006 9BB9     		cbnz	r3, .L16
 297              	.L10:
  85:Core/Src/main.c ****   {
 298              		.loc 1 85 3 is_stmt 1 view .LVU72
  85:Core/Src/main.c ****   {
 299              		.loc 1 85 7 is_stmt 0 view .LVU73
 300 0008 164B     		ldr	r3, .L17+4
 301 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  85:Core/Src/main.c ****   {
 302              		.loc 1 85 6 view .LVU74
 303 000c 0BB3     		cbz	r3, .L11
  87:Core/Src/main.c ****     if (ESCvar.dcsync)
 304              		.loc 1 87 5 is_stmt 1 view .LVU75
 305 000e 164C     		ldr	r4, .L17+8
 306 0010 0422     		movs	r2, #4
 307 0012 2146     		mov	r1, r4
 308 0014 4FF41160 		mov	r0, #2320
 309 0018 FFF7FEFF 		bl	ESC_read
 310              	.LVL12:
  87:Core/Src/main.c ****     if (ESCvar.dcsync)
 311              		.loc 1 87 24 view .LVU76
  88:Core/Src/main.c ****     {
 312              		.loc 1 88 5 view .LVU77
  88:Core/Src/main.c ****     {
 313              		.loc 1 88 15 is_stmt 0 view .LVU78
 314 001c 14F8603C 		ldrb	r3, [r4, #-96]	@ zero_extendqisi2
  88:Core/Src/main.c ****     {
 315              		.loc 1 88 8 view .LVU79
 316 0020 9BB1     		cbz	r3, .L12
  90:Core/Src/main.c ****     }
 317              		.loc 1 90 7 is_stmt 1 view .LVU80
 318 0022 0220     		movs	r0, #2
 319 0024 FFF7FEFF 		bl	DIG_process
 320              	.LVL13:
 321              	.L13:
  96:Core/Src/main.c ****   }
 322              		.loc 1 96 5 view .LVU81
ARM GAS  /tmp/ccTGKR4P.s 			page 13


  96:Core/Src/main.c ****   }
 323              		.loc 1 96 18 is_stmt 0 view .LVU82
 324 0028 0E4B     		ldr	r3, .L17+4
 325 002a 0022     		movs	r2, #0
 326 002c 1A70     		strb	r2, [r3]
 327              	.L9:
 110:Core/Src/main.c **** /* USER CODE END 0 */
 328              		.loc 1 110 1 view .LVU83
 329 002e 10BD     		pop	{r4, pc}
 330              	.L16:
  81:Core/Src/main.c ****     DIG_process(DIG_PROCESS_APP_HOOK_FLAG | DIG_PROCESS_INPUTS_FLAG);
 331              		.loc 1 81 5 is_stmt 1 view .LVU84
 332 0030 0422     		movs	r2, #4
 333 0032 0D49     		ldr	r1, .L17+8
 334 0034 4FF41160 		mov	r0, #2320
 335 0038 FFF7FEFF 		bl	ESC_read
 336              	.LVL14:
  81:Core/Src/main.c ****     DIG_process(DIG_PROCESS_APP_HOOK_FLAG | DIG_PROCESS_INPUTS_FLAG);
 337              		.loc 1 81 24 view .LVU85
  82:Core/Src/main.c ****     sync0_irq_flag = 0;
 338              		.loc 1 82 5 view .LVU86
 339 003c 0920     		movs	r0, #9
 340 003e FFF7FEFF 		bl	DIG_process
 341              	.LVL15:
  83:Core/Src/main.c ****   }
 342              		.loc 1 83 5 view .LVU87
  83:Core/Src/main.c ****   }
 343              		.loc 1 83 20 is_stmt 0 view .LVU88
 344 0042 074B     		ldr	r3, .L17
 345 0044 0022     		movs	r2, #0
 346 0046 1A70     		strb	r2, [r3]
 347 0048 DEE7     		b	.L10
 348              	.L12:
  94:Core/Src/main.c ****     }
 349              		.loc 1 94 7 is_stmt 1 view .LVU89
 350 004a 0B20     		movs	r0, #11
 351 004c FFF7FEFF 		bl	DIG_process
 352              	.LVL16:
 353 0050 EAE7     		b	.L13
 354              	.L11:
 107:Core/Src/main.c ****     DIG_process(DIG_PROCESS_WD_FLAG);
 355              		.loc 1 107 5 view .LVU90
 356 0052 FFF7FEFF 		bl	ecat_slv_poll
 357              	.LVL17:
 108:Core/Src/main.c ****   }
 358              		.loc 1 108 5 view .LVU91
 359 0056 0420     		movs	r0, #4
 360 0058 FFF7FEFF 		bl	DIG_process
 361              	.LVL18:
 110:Core/Src/main.c **** /* USER CODE END 0 */
 362              		.loc 1 110 1 is_stmt 0 view .LVU92
 363 005c E7E7     		b	.L9
 364              	.L18:
 365 005e 00BF     		.align	2
 366              	.L17:
 367 0060 00000000 		.word	.LANCHOR0
 368 0064 00000000 		.word	.LANCHOR1
ARM GAS  /tmp/ccTGKR4P.s 			page 14


 369 0068 D8000000 		.word	ESCvar+216
 370              		.cfi_endproc
 371              	.LFE134:
 373              		.section	.text.LedTask,"ax",%progbits
 374              		.align	1
 375              		.global	LedTask
 376              		.syntax unified
 377              		.thumb
 378              		.thumb_func
 380              	LedTask:
 381              	.LVL19:
 382              	.LFB140:
 342:Core/Src/main.c **** 
 343:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 344:Core/Src/main.c **** 
 345:Core/Src/main.c **** /* USER CODE END 4 */
 346:Core/Src/main.c **** 
 347:Core/Src/main.c **** /* USER CODE BEGIN Header_LedTask */
 348:Core/Src/main.c **** /**
 349:Core/Src/main.c ****  * @brief  Function implementing the ledTask thread.
 350:Core/Src/main.c ****  * @param  argument: Not used
 351:Core/Src/main.c ****  * @retval None
 352:Core/Src/main.c ****  */
 353:Core/Src/main.c **** /* USER CODE END Header_LedTask */
 354:Core/Src/main.c **** void LedTask(void *argument)
 355:Core/Src/main.c **** {
 383              		.loc 1 355 1 is_stmt 1 view -0
 384              		.cfi_startproc
 385              		@ Volatile: function does not return.
 386              		@ args = 0, pretend = 0, frame = 0
 387              		@ frame_needed = 0, uses_anonymous_args = 0
 388              		.loc 1 355 1 is_stmt 0 view .LVU94
 389 0000 08B5     		push	{r3, lr}
 390              		.cfi_def_cfa_offset 8
 391              		.cfi_offset 3, -8
 392              		.cfi_offset 14, -4
 356:Core/Src/main.c ****   /* USER CODE BEGIN 5 */
 357:Core/Src/main.c ****   ecatapp_init();
 393              		.loc 1 357 3 is_stmt 1 view .LVU95
 394 0002 FFF7FEFF 		bl	ecatapp_init
 395              	.LVL20:
 396              	.L20:
 358:Core/Src/main.c ****   /* Infinite loop */
 359:Core/Src/main.c ****   for (;;)
 397              		.loc 1 359 3 discriminator 1 view .LVU96
 360:Core/Src/main.c ****   {
 361:Core/Src/main.c ****     ecatapp_loop();
 398              		.loc 1 361 5 discriminator 1 view .LVU97
 399 0006 FFF7FEFF 		bl	ecatapp_loop
 400              	.LVL21:
 359:Core/Src/main.c ****   {
 401              		.loc 1 359 9 discriminator 1 view .LVU98
 402 000a FCE7     		b	.L20
 403              		.cfi_endproc
 404              	.LFE140:
 406              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 407              		.align	1
ARM GAS  /tmp/ccTGKR4P.s 			page 15


 408              		.global	HAL_TIM_PeriodElapsedCallback
 409              		.syntax unified
 410              		.thumb
 411              		.thumb_func
 413              	HAL_TIM_PeriodElapsedCallback:
 414              	.LVL22:
 415              	.LFB141:
 362:Core/Src/main.c ****   }
 363:Core/Src/main.c ****   /* USER CODE END 5 */
 364:Core/Src/main.c **** }
 365:Core/Src/main.c **** 
 366:Core/Src/main.c **** /**
 367:Core/Src/main.c ****  * @brief  Period elapsed callback in non blocking mode
 368:Core/Src/main.c ****  * @note   This function is called  when TIM6 interrupt took place, inside
 369:Core/Src/main.c ****  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 370:Core/Src/main.c ****  * a global variable "uwTick" used as application time base.
 371:Core/Src/main.c ****  * @param  htim : TIM handle
 372:Core/Src/main.c ****  * @retval None
 373:Core/Src/main.c ****  */
 374:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 375:Core/Src/main.c **** {
 416              		.loc 1 375 1 view -0
 417              		.cfi_startproc
 418              		@ args = 0, pretend = 0, frame = 0
 419              		@ frame_needed = 0, uses_anonymous_args = 0
 420              		.loc 1 375 1 is_stmt 0 view .LVU100
 421 0000 08B5     		push	{r3, lr}
 422              		.cfi_def_cfa_offset 8
 423              		.cfi_offset 3, -8
 424              		.cfi_offset 14, -4
 376:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 377:Core/Src/main.c **** 
 378:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 379:Core/Src/main.c ****   if (htim->Instance == TIM6)
 425              		.loc 1 379 3 is_stmt 1 view .LVU101
 426              		.loc 1 379 11 is_stmt 0 view .LVU102
 427 0002 0268     		ldr	r2, [r0]
 428              		.loc 1 379 6 view .LVU103
 429 0004 034B     		ldr	r3, .L26
 430 0006 9A42     		cmp	r2, r3
 431 0008 00D0     		beq	.L25
 432              	.LVL23:
 433              	.L22:
 380:Core/Src/main.c ****   {
 381:Core/Src/main.c ****     HAL_IncTick();
 382:Core/Src/main.c ****   }
 383:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 384:Core/Src/main.c **** 
 385:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 386:Core/Src/main.c **** }
 434              		.loc 1 386 1 view .LVU104
 435 000a 08BD     		pop	{r3, pc}
 436              	.LVL24:
 437              	.L25:
 381:Core/Src/main.c ****   }
 438              		.loc 1 381 5 is_stmt 1 view .LVU105
 439 000c FFF7FEFF 		bl	HAL_IncTick
ARM GAS  /tmp/ccTGKR4P.s 			page 16


 440              	.LVL25:
 441              		.loc 1 386 1 is_stmt 0 view .LVU106
 442 0010 FBE7     		b	.L22
 443              	.L27:
 444 0012 00BF     		.align	2
 445              	.L26:
 446 0014 00100040 		.word	1073745920
 447              		.cfi_endproc
 448              	.LFE141:
 450              		.section	.text.Error_Handler,"ax",%progbits
 451              		.align	1
 452              		.global	Error_Handler
 453              		.syntax unified
 454              		.thumb
 455              		.thumb_func
 457              	Error_Handler:
 458              	.LFB142:
 387:Core/Src/main.c **** 
 388:Core/Src/main.c **** /**
 389:Core/Src/main.c ****  * @brief  This function is executed in case of error occurrence.
 390:Core/Src/main.c ****  * @retval None
 391:Core/Src/main.c ****  */
 392:Core/Src/main.c **** void Error_Handler(void)
 393:Core/Src/main.c **** {
 459              		.loc 1 393 1 is_stmt 1 view -0
 460              		.cfi_startproc
 461              		@ Volatile: function does not return.
 462              		@ args = 0, pretend = 0, frame = 0
 463              		@ frame_needed = 0, uses_anonymous_args = 0
 464              		@ link register save eliminated.
 394:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 395:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 396:Core/Src/main.c ****   __disable_irq();
 465              		.loc 1 396 3 view .LVU108
 466              	.LBB9:
 467              	.LBI9:
 468              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
ARM GAS  /tmp/ccTGKR4P.s 			page 17


  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccTGKR4P.s 			page 18


  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccTGKR4P.s 			page 19


 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 469              		.loc 2 140 27 view .LVU109
 470              	.LBB10:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 471              		.loc 2 142 3 view .LVU110
 472              		.syntax unified
 473              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 474 0000 72B6     		cpsid i
 475              	@ 0 "" 2
 476              		.thumb
 477              		.syntax unified
 478              	.L29:
 479              	.LBE10:
 480              	.LBE9:
 397:Core/Src/main.c ****   while (1)
 481              		.loc 1 397 3 discriminator 1 view .LVU111
 398:Core/Src/main.c ****   {
 399:Core/Src/main.c ****   }
 482              		.loc 1 399 3 discriminator 1 view .LVU112
 397:Core/Src/main.c ****   while (1)
 483              		.loc 1 397 9 discriminator 1 view .LVU113
 484 0002 FEE7     		b	.L29
 485              		.cfi_endproc
 486              	.LFE142:
 488              		.section	.text.MX_SPI2_Init,"ax",%progbits
 489              		.align	1
 490              		.syntax unified
 491              		.thumb
 492              		.thumb_func
 494              	MX_SPI2_Init:
 495              	.LFB137:
 243:Core/Src/main.c **** 
 496              		.loc 1 243 1 view -0
 497              		.cfi_startproc
 498              		@ args = 0, pretend = 0, frame = 0
 499              		@ frame_needed = 0, uses_anonymous_args = 0
 500 0000 08B5     		push	{r3, lr}
 501              		.cfi_def_cfa_offset 8
 502              		.cfi_offset 3, -8
 503              		.cfi_offset 14, -4
 253:Core/Src/main.c ****   hspi2.Init.Mode = SPI_MODE_MASTER;
 504              		.loc 1 253 3 view .LVU115
 253:Core/Src/main.c ****   hspi2.Init.Mode = SPI_MODE_MASTER;
 505              		.loc 1 253 18 is_stmt 0 view .LVU116
 506 0002 0E48     		ldr	r0, .L34
 507 0004 0E4B     		ldr	r3, .L34+4
 508 0006 0360     		str	r3, [r0]
 254:Core/Src/main.c ****   hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 509              		.loc 1 254 3 is_stmt 1 view .LVU117
 254:Core/Src/main.c ****   hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 510              		.loc 1 254 19 is_stmt 0 view .LVU118
ARM GAS  /tmp/ccTGKR4P.s 			page 20


 511 0008 4FF48273 		mov	r3, #260
 512 000c 4360     		str	r3, [r0, #4]
 255:Core/Src/main.c ****   hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 513              		.loc 1 255 3 is_stmt 1 view .LVU119
 255:Core/Src/main.c ****   hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 514              		.loc 1 255 24 is_stmt 0 view .LVU120
 515 000e 0023     		movs	r3, #0
 516 0010 8360     		str	r3, [r0, #8]
 256:Core/Src/main.c ****   hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 517              		.loc 1 256 3 is_stmt 1 view .LVU121
 256:Core/Src/main.c ****   hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 518              		.loc 1 256 23 is_stmt 0 view .LVU122
 519 0012 C360     		str	r3, [r0, #12]
 257:Core/Src/main.c ****   hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 520              		.loc 1 257 3 is_stmt 1 view .LVU123
 257:Core/Src/main.c ****   hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 521              		.loc 1 257 26 is_stmt 0 view .LVU124
 522 0014 0361     		str	r3, [r0, #16]
 258:Core/Src/main.c ****   hspi2.Init.NSS = SPI_NSS_SOFT;
 523              		.loc 1 258 3 is_stmt 1 view .LVU125
 258:Core/Src/main.c ****   hspi2.Init.NSS = SPI_NSS_SOFT;
 524              		.loc 1 258 23 is_stmt 0 view .LVU126
 525 0016 4361     		str	r3, [r0, #20]
 259:Core/Src/main.c ****   hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 526              		.loc 1 259 3 is_stmt 1 view .LVU127
 259:Core/Src/main.c ****   hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 527              		.loc 1 259 18 is_stmt 0 view .LVU128
 528 0018 4FF40072 		mov	r2, #512
 529 001c 8261     		str	r2, [r0, #24]
 260:Core/Src/main.c ****   hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 530              		.loc 1 260 3 is_stmt 1 view .LVU129
 260:Core/Src/main.c ****   hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 531              		.loc 1 260 32 is_stmt 0 view .LVU130
 532 001e C361     		str	r3, [r0, #28]
 261:Core/Src/main.c ****   hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 533              		.loc 1 261 3 is_stmt 1 view .LVU131
 261:Core/Src/main.c ****   hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 534              		.loc 1 261 23 is_stmt 0 view .LVU132
 535 0020 0362     		str	r3, [r0, #32]
 262:Core/Src/main.c ****   hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 536              		.loc 1 262 3 is_stmt 1 view .LVU133
 262:Core/Src/main.c ****   hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 537              		.loc 1 262 21 is_stmt 0 view .LVU134
 538 0022 4362     		str	r3, [r0, #36]
 263:Core/Src/main.c ****   hspi2.Init.CRCPolynomial = 128;
 539              		.loc 1 263 3 is_stmt 1 view .LVU135
 263:Core/Src/main.c ****   hspi2.Init.CRCPolynomial = 128;
 540              		.loc 1 263 29 is_stmt 0 view .LVU136
 541 0024 4FF40053 		mov	r3, #8192
 542 0028 8362     		str	r3, [r0, #40]
 264:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi2) != HAL_OK)
 543              		.loc 1 264 3 is_stmt 1 view .LVU137
 264:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi2) != HAL_OK)
 544              		.loc 1 264 28 is_stmt 0 view .LVU138
 545 002a 8023     		movs	r3, #128
 546 002c C362     		str	r3, [r0, #44]
 265:Core/Src/main.c ****   {
ARM GAS  /tmp/ccTGKR4P.s 			page 21


 547              		.loc 1 265 3 is_stmt 1 view .LVU139
 265:Core/Src/main.c ****   {
 548              		.loc 1 265 7 is_stmt 0 view .LVU140
 549 002e FFF7FEFF 		bl	HAL_SPI_Init
 550              	.LVL26:
 265:Core/Src/main.c ****   {
 551              		.loc 1 265 6 view .LVU141
 552 0032 00B9     		cbnz	r0, .L33
 272:Core/Src/main.c **** 
 553              		.loc 1 272 1 view .LVU142
 554 0034 08BD     		pop	{r3, pc}
 555              	.L33:
 267:Core/Src/main.c ****   }
 556              		.loc 1 267 5 is_stmt 1 view .LVU143
 557 0036 FFF7FEFF 		bl	Error_Handler
 558              	.LVL27:
 559              	.L35:
 560 003a 00BF     		.align	2
 561              	.L34:
 562 003c 00000000 		.word	.LANCHOR2
 563 0040 00380040 		.word	1073756160
 564              		.cfi_endproc
 565              	.LFE137:
 567              		.section	.text.SystemClock_Config,"ax",%progbits
 568              		.align	1
 569              		.global	SystemClock_Config
 570              		.syntax unified
 571              		.thumb
 572              		.thumb_func
 574              	SystemClock_Config:
 575              	.LFB136:
 198:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 576              		.loc 1 198 1 view -0
 577              		.cfi_startproc
 578              		@ args = 0, pretend = 0, frame = 80
 579              		@ frame_needed = 0, uses_anonymous_args = 0
 580 0000 00B5     		push	{lr}
 581              		.cfi_def_cfa_offset 4
 582              		.cfi_offset 14, -4
 583 0002 95B0     		sub	sp, sp, #84
 584              		.cfi_def_cfa_offset 88
 199:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 585              		.loc 1 199 3 view .LVU145
 199:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 586              		.loc 1 199 22 is_stmt 0 view .LVU146
 587 0004 3022     		movs	r2, #48
 588 0006 0021     		movs	r1, #0
 589 0008 08A8     		add	r0, sp, #32
 590 000a FFF7FEFF 		bl	memset
 591              	.LVL28:
 200:Core/Src/main.c **** 
 592              		.loc 1 200 3 is_stmt 1 view .LVU147
 200:Core/Src/main.c **** 
 593              		.loc 1 200 22 is_stmt 0 view .LVU148
 594 000e 0023     		movs	r3, #0
 595 0010 0393     		str	r3, [sp, #12]
 596 0012 0493     		str	r3, [sp, #16]
ARM GAS  /tmp/ccTGKR4P.s 			page 22


 597 0014 0593     		str	r3, [sp, #20]
 598 0016 0693     		str	r3, [sp, #24]
 599 0018 0793     		str	r3, [sp, #28]
 204:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 600              		.loc 1 204 3 is_stmt 1 view .LVU149
 601              	.LBB11:
 204:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 602              		.loc 1 204 3 view .LVU150
 603 001a 0193     		str	r3, [sp, #4]
 204:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 604              		.loc 1 204 3 view .LVU151
 605 001c 204A     		ldr	r2, .L42
 606 001e 116C     		ldr	r1, [r2, #64]
 607 0020 41F08051 		orr	r1, r1, #268435456
 608 0024 1164     		str	r1, [r2, #64]
 204:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 609              		.loc 1 204 3 view .LVU152
 610 0026 126C     		ldr	r2, [r2, #64]
 611 0028 02F08052 		and	r2, r2, #268435456
 612 002c 0192     		str	r2, [sp, #4]
 204:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 613              		.loc 1 204 3 view .LVU153
 614 002e 019A     		ldr	r2, [sp, #4]
 615              	.LBE11:
 204:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 616              		.loc 1 204 3 view .LVU154
 205:Core/Src/main.c **** 
 617              		.loc 1 205 3 view .LVU155
 618              	.LBB12:
 205:Core/Src/main.c **** 
 619              		.loc 1 205 3 view .LVU156
 620 0030 0293     		str	r3, [sp, #8]
 205:Core/Src/main.c **** 
 621              		.loc 1 205 3 view .LVU157
 622 0032 1C4B     		ldr	r3, .L42+4
 623 0034 1A68     		ldr	r2, [r3]
 624 0036 42F48042 		orr	r2, r2, #16384
 625 003a 1A60     		str	r2, [r3]
 205:Core/Src/main.c **** 
 626              		.loc 1 205 3 view .LVU158
 627 003c 1B68     		ldr	r3, [r3]
 628 003e 03F48043 		and	r3, r3, #16384
 629 0042 0293     		str	r3, [sp, #8]
 205:Core/Src/main.c **** 
 630              		.loc 1 205 3 view .LVU159
 631 0044 029B     		ldr	r3, [sp, #8]
 632              	.LBE12:
 205:Core/Src/main.c **** 
 633              		.loc 1 205 3 view .LVU160
 210:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 634              		.loc 1 210 3 view .LVU161
 210:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 635              		.loc 1 210 36 is_stmt 0 view .LVU162
 636 0046 0123     		movs	r3, #1
 637 0048 0893     		str	r3, [sp, #32]
 211:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 638              		.loc 1 211 3 is_stmt 1 view .LVU163
ARM GAS  /tmp/ccTGKR4P.s 			page 23


 211:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 639              		.loc 1 211 30 is_stmt 0 view .LVU164
 640 004a 4FF48033 		mov	r3, #65536
 641 004e 0993     		str	r3, [sp, #36]
 212:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 642              		.loc 1 212 3 is_stmt 1 view .LVU165
 212:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 643              		.loc 1 212 34 is_stmt 0 view .LVU166
 644 0050 0223     		movs	r3, #2
 645 0052 0E93     		str	r3, [sp, #56]
 213:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 646              		.loc 1 213 3 is_stmt 1 view .LVU167
 213:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 647              		.loc 1 213 35 is_stmt 0 view .LVU168
 648 0054 4FF48002 		mov	r2, #4194304
 649 0058 0F92     		str	r2, [sp, #60]
 214:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 650              		.loc 1 214 3 is_stmt 1 view .LVU169
 214:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 651              		.loc 1 214 30 is_stmt 0 view .LVU170
 652 005a 0422     		movs	r2, #4
 653 005c 1092     		str	r2, [sp, #64]
 215:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 654              		.loc 1 215 3 is_stmt 1 view .LVU171
 215:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 655              		.loc 1 215 30 is_stmt 0 view .LVU172
 656 005e A822     		movs	r2, #168
 657 0060 1192     		str	r2, [sp, #68]
 216:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 658              		.loc 1 216 3 is_stmt 1 view .LVU173
 216:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 659              		.loc 1 216 30 is_stmt 0 view .LVU174
 660 0062 1293     		str	r3, [sp, #72]
 217:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 661              		.loc 1 217 3 is_stmt 1 view .LVU175
 217:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 662              		.loc 1 217 30 is_stmt 0 view .LVU176
 663 0064 0723     		movs	r3, #7
 664 0066 1393     		str	r3, [sp, #76]
 218:Core/Src/main.c ****   {
 665              		.loc 1 218 3 is_stmt 1 view .LVU177
 218:Core/Src/main.c ****   {
 666              		.loc 1 218 7 is_stmt 0 view .LVU178
 667 0068 08A8     		add	r0, sp, #32
 668 006a FFF7FEFF 		bl	HAL_RCC_OscConfig
 669              	.LVL29:
 218:Core/Src/main.c ****   {
 670              		.loc 1 218 6 view .LVU179
 671 006e 98B9     		cbnz	r0, .L40
 225:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 672              		.loc 1 225 3 is_stmt 1 view .LVU180
 225:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 673              		.loc 1 225 31 is_stmt 0 view .LVU181
 674 0070 0F23     		movs	r3, #15
 675 0072 0393     		str	r3, [sp, #12]
 226:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 676              		.loc 1 226 3 is_stmt 1 view .LVU182
ARM GAS  /tmp/ccTGKR4P.s 			page 24


 226:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 677              		.loc 1 226 34 is_stmt 0 view .LVU183
 678 0074 0223     		movs	r3, #2
 679 0076 0493     		str	r3, [sp, #16]
 227:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 680              		.loc 1 227 3 is_stmt 1 view .LVU184
 227:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 681              		.loc 1 227 35 is_stmt 0 view .LVU185
 682 0078 0023     		movs	r3, #0
 683 007a 0593     		str	r3, [sp, #20]
 228:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 684              		.loc 1 228 3 is_stmt 1 view .LVU186
 228:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 685              		.loc 1 228 36 is_stmt 0 view .LVU187
 686 007c 4FF4A053 		mov	r3, #5120
 687 0080 0693     		str	r3, [sp, #24]
 229:Core/Src/main.c **** 
 688              		.loc 1 229 3 is_stmt 1 view .LVU188
 229:Core/Src/main.c **** 
 689              		.loc 1 229 36 is_stmt 0 view .LVU189
 690 0082 4FF48053 		mov	r3, #4096
 691 0086 0793     		str	r3, [sp, #28]
 231:Core/Src/main.c ****   {
 692              		.loc 1 231 3 is_stmt 1 view .LVU190
 231:Core/Src/main.c ****   {
 693              		.loc 1 231 7 is_stmt 0 view .LVU191
 694 0088 0521     		movs	r1, #5
 695 008a 03A8     		add	r0, sp, #12
 696 008c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 697              	.LVL30:
 231:Core/Src/main.c ****   {
 698              		.loc 1 231 6 view .LVU192
 699 0090 20B9     		cbnz	r0, .L41
 235:Core/Src/main.c **** 
 700              		.loc 1 235 1 view .LVU193
 701 0092 15B0     		add	sp, sp, #84
 702              		.cfi_remember_state
 703              		.cfi_def_cfa_offset 4
 704              		@ sp needed
 705 0094 5DF804FB 		ldr	pc, [sp], #4
 706              	.L40:
 707              		.cfi_restore_state
 220:Core/Src/main.c ****   }
 708              		.loc 1 220 5 is_stmt 1 view .LVU194
 709 0098 FFF7FEFF 		bl	Error_Handler
 710              	.LVL31:
 711              	.L41:
 233:Core/Src/main.c ****   }
 712              		.loc 1 233 5 view .LVU195
 713 009c FFF7FEFF 		bl	Error_Handler
 714              	.LVL32:
 715              	.L43:
 716              		.align	2
 717              	.L42:
 718 00a0 00380240 		.word	1073887232
 719 00a4 00700040 		.word	1073770496
 720              		.cfi_endproc
ARM GAS  /tmp/ccTGKR4P.s 			page 25


 721              	.LFE136:
 723              		.section	.text.main,"ax",%progbits
 724              		.align	1
 725              		.global	main
 726              		.syntax unified
 727              		.thumb
 728              		.thumb_func
 730              	main:
 731              	.LFB135:
 118:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 732              		.loc 1 118 1 view -0
 733              		.cfi_startproc
 734              		@ Volatile: function does not return.
 735              		@ args = 0, pretend = 0, frame = 0
 736              		@ frame_needed = 0, uses_anonymous_args = 0
 737 0000 08B5     		push	{r3, lr}
 738              		.cfi_def_cfa_offset 8
 739              		.cfi_offset 3, -8
 740              		.cfi_offset 14, -4
 126:Core/Src/main.c **** 
 741              		.loc 1 126 3 view .LVU197
 742 0002 FFF7FEFF 		bl	HAL_Init
 743              	.LVL33:
 133:Core/Src/main.c **** 
 744              		.loc 1 133 3 view .LVU198
 745 0006 FFF7FEFF 		bl	SystemClock_Config
 746              	.LVL34:
 140:Core/Src/main.c ****   MX_DMA_Init();
 747              		.loc 1 140 3 view .LVU199
 748 000a FFF7FEFF 		bl	MX_GPIO_Init
 749              	.LVL35:
 141:Core/Src/main.c ****   MX_SPI2_Init();
 750              		.loc 1 141 3 view .LVU200
 751 000e FFF7FEFF 		bl	MX_DMA_Init
 752              	.LVL36:
 142:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 753              		.loc 1 142 3 view .LVU201
 754 0012 FFF7FEFF 		bl	MX_SPI2_Init
 755              	.LVL37:
 148:Core/Src/main.c **** 
 756              		.loc 1 148 3 view .LVU202
 757 0016 FFF7FEFF 		bl	osKernelInitialize
 758              	.LVL38:
 168:Core/Src/main.c **** 
 759              		.loc 1 168 3 view .LVU203
 168:Core/Src/main.c **** 
 760              		.loc 1 168 19 is_stmt 0 view .LVU204
 761 001a 054A     		ldr	r2, .L47
 762 001c 0021     		movs	r1, #0
 763 001e 0548     		ldr	r0, .L47+4
 764 0020 FFF7FEFF 		bl	osThreadNew
 765              	.LVL39:
 168:Core/Src/main.c **** 
 766              		.loc 1 168 17 view .LVU205
 767 0024 044B     		ldr	r3, .L47+8
 768 0026 1860     		str	r0, [r3]
 179:Core/Src/main.c **** 
ARM GAS  /tmp/ccTGKR4P.s 			page 26


 769              		.loc 1 179 3 is_stmt 1 view .LVU206
 770 0028 FFF7FEFF 		bl	osKernelStart
 771              	.LVL40:
 772              	.L45:
 184:Core/Src/main.c ****   {
 773              		.loc 1 184 3 discriminator 1 view .LVU207
 189:Core/Src/main.c ****   /* USER CODE END 3 */
 774              		.loc 1 189 3 discriminator 1 view .LVU208
 184:Core/Src/main.c ****   {
 775              		.loc 1 184 9 discriminator 1 view .LVU209
 776 002c FEE7     		b	.L45
 777              	.L48:
 778 002e 00BF     		.align	2
 779              	.L47:
 780 0030 00000000 		.word	.LANCHOR3
 781 0034 00000000 		.word	LedTask
 782 0038 00000000 		.word	.LANCHOR4
 783              		.cfi_endproc
 784              	.LFE135:
 786              		.global	ledTask_attributes
 787              		.section	.rodata.str1.4,"aMS",%progbits,1
 788              		.align	2
 789              	.LC0:
 790 0000 6C656454 		.ascii	"ledTask\000"
 790      61736B00 
 791              		.global	ledTaskHandle
 792              		.global	hdma_spi2_tx
 793              		.global	hdma_spi2_rx
 794              		.global	hspi2
 795              		.section	.bss.hdma_spi2_rx,"aw",%nobits
 796              		.align	2
 799              	hdma_spi2_rx:
 800 0000 00000000 		.space	96
 800      00000000 
 800      00000000 
 800      00000000 
 800      00000000 
 801              		.section	.bss.hdma_spi2_tx,"aw",%nobits
 802              		.align	2
 805              	hdma_spi2_tx:
 806 0000 00000000 		.space	96
 806      00000000 
 806      00000000 
 806      00000000 
 806      00000000 
 807              		.section	.bss.hspi2,"aw",%nobits
 808              		.align	2
 809              		.set	.LANCHOR2,. + 0
 812              	hspi2:
 813 0000 00000000 		.space	88
 813      00000000 
 813      00000000 
 813      00000000 
 813      00000000 
 814              		.section	.bss.ledTaskHandle,"aw",%nobits
 815              		.align	2
 816              		.set	.LANCHOR4,. + 0
ARM GAS  /tmp/ccTGKR4P.s 			page 27


 819              	ledTaskHandle:
 820 0000 00000000 		.space	4
 821              		.section	.bss.pdi_dma_transmission,"aw",%nobits
 824              	pdi_dma_transmission:
 825 0000 00       		.space	1
 826              		.section	.bss.pdi_irq_flag,"aw",%nobits
 827              		.set	.LANCHOR1,. + 0
 830              	pdi_irq_flag:
 831 0000 00       		.space	1
 832              		.section	.bss.sync0_irq_flag,"aw",%nobits
 833              		.set	.LANCHOR0,. + 0
 836              	sync0_irq_flag:
 837 0000 00       		.space	1
 838              		.section	.rodata.ledTask_attributes,"a"
 839              		.align	2
 840              		.set	.LANCHOR3,. + 0
 843              	ledTask_attributes:
 844 0000 00000000 		.word	.LC0
 845 0004 00000000 		.space	16
 845      00000000 
 845      00000000 
 845      00000000 
 846 0014 00020000 		.word	512
 847 0018 18000000 		.word	24
 848 001c 00000000 		.space	8
 848      00000000 
 849              		.text
 850              	.Letext0:
 851              		.file 3 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/machine/_default_types.h"
 852              		.file 4 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/_stdint.h"
 853              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f405xx.h"
 854              		.file 6 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 855              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 856              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 857              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 858              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 859              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 860              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
 861              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 862              		.file 14 "Drivers/SOES/Inc/esc.h"
 863              		.file 15 "Core/Inc/pdo_override.h"
 864              		.file 16 "Core/Inc/main.h"
 865              		.file 17 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
 866              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 867              		.file 19 "Core/Inc/ecatapp.h"
 868              		.file 20 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 869              		.file 21 "Drivers/SOES/Inc/ecat_slv.h"
 870              		.file 22 "<built-in>"
ARM GAS  /tmp/ccTGKR4P.s 			page 28


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccTGKR4P.s:20     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccTGKR4P.s:25     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccTGKR4P.s:200    .text.MX_GPIO_Init:00000000000000d4 $d
     /tmp/ccTGKR4P.s:207    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccTGKR4P.s:212    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccTGKR4P.s:270    .text.MX_DMA_Init:0000000000000040 $d
     /tmp/ccTGKR4P.s:275    .text.ecatapp_loop:0000000000000000 $t
     /tmp/ccTGKR4P.s:281    .text.ecatapp_loop:0000000000000000 ecatapp_loop
     /tmp/ccTGKR4P.s:367    .text.ecatapp_loop:0000000000000060 $d
     /tmp/ccTGKR4P.s:374    .text.LedTask:0000000000000000 $t
     /tmp/ccTGKR4P.s:380    .text.LedTask:0000000000000000 LedTask
     /tmp/ccTGKR4P.s:407    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccTGKR4P.s:413    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccTGKR4P.s:446    .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
     /tmp/ccTGKR4P.s:451    .text.Error_Handler:0000000000000000 $t
     /tmp/ccTGKR4P.s:457    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccTGKR4P.s:489    .text.MX_SPI2_Init:0000000000000000 $t
     /tmp/ccTGKR4P.s:494    .text.MX_SPI2_Init:0000000000000000 MX_SPI2_Init
     /tmp/ccTGKR4P.s:562    .text.MX_SPI2_Init:000000000000003c $d
     /tmp/ccTGKR4P.s:568    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccTGKR4P.s:574    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccTGKR4P.s:718    .text.SystemClock_Config:00000000000000a0 $d
     /tmp/ccTGKR4P.s:724    .text.main:0000000000000000 $t
     /tmp/ccTGKR4P.s:730    .text.main:0000000000000000 main
     /tmp/ccTGKR4P.s:780    .text.main:0000000000000030 $d
     /tmp/ccTGKR4P.s:843    .rodata.ledTask_attributes:0000000000000000 ledTask_attributes
     /tmp/ccTGKR4P.s:788    .rodata.str1.4:0000000000000000 $d
     /tmp/ccTGKR4P.s:819    .bss.ledTaskHandle:0000000000000000 ledTaskHandle
     /tmp/ccTGKR4P.s:805    .bss.hdma_spi2_tx:0000000000000000 hdma_spi2_tx
     /tmp/ccTGKR4P.s:799    .bss.hdma_spi2_rx:0000000000000000 hdma_spi2_rx
     /tmp/ccTGKR4P.s:812    .bss.hspi2:0000000000000000 hspi2
     /tmp/ccTGKR4P.s:796    .bss.hdma_spi2_rx:0000000000000000 $d
     /tmp/ccTGKR4P.s:802    .bss.hdma_spi2_tx:0000000000000000 $d
     /tmp/ccTGKR4P.s:808    .bss.hspi2:0000000000000000 $d
     /tmp/ccTGKR4P.s:815    .bss.ledTaskHandle:0000000000000000 $d
     /tmp/ccTGKR4P.s:824    .bss.pdi_dma_transmission:0000000000000000 pdi_dma_transmission
     /tmp/ccTGKR4P.s:825    .bss.pdi_dma_transmission:0000000000000000 $d
     /tmp/ccTGKR4P.s:830    .bss.pdi_irq_flag:0000000000000000 pdi_irq_flag
     /tmp/ccTGKR4P.s:831    .bss.pdi_irq_flag:0000000000000000 $d
     /tmp/ccTGKR4P.s:836    .bss.sync0_irq_flag:0000000000000000 sync0_irq_flag
     /tmp/ccTGKR4P.s:837    .bss.sync0_irq_flag:0000000000000000 $d
     /tmp/ccTGKR4P.s:839    .rodata.ledTask_attributes:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
ESC_read
DIG_process
ecat_slv_poll
ESCvar
ecatapp_init
HAL_IncTick
HAL_SPI_Init
ARM GAS  /tmp/ccTGKR4P.s 			page 29


memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
osKernelInitialize
osThreadNew
osKernelStart
