ARM GAS  /tmp/ccxSMOfF.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_usart.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.USART_DeInit,"ax",%progbits
  20              		.align	1
  21              		.global	USART_DeInit
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	USART_DeInit:
  27              	.LVL0:
  28              	.LFB123:
  29              		.file 1 "Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c"
   1:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
   2:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************
   3:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @file    stm32f4xx_usart.c
   4:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @author  MCD Application Team
   5:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @version V1.6.1
   6:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @date    21-October-2015
   7:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief   This file provides firmware functions to manage the following 
   8:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          functionalities of the Universal synchronous asynchronous receiver
   9:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          transmitter (USART):           
  10:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           + Initialization and Configuration
  11:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           + Data transfers
  12:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           + Multi-Processor Communication
  13:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           + LIN mode
  14:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           + Half-duplex mode
  15:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           + Smartcard mode
  16:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           + IrDA mode
  17:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           + DMA transfers management
  18:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           + Interrupts and flags management 
  19:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           
  20:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   @verbatim       
  21:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
  22:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                         ##### How to use this driver #####
  23:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
  24:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
  25:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable peripheral clock using the following functions
  26:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           RCC_APB2PeriphClockCmd(RCC_APB2Periph_USARTx, ENABLE) for USART1 and USART6 
  27:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           RCC_APB1PeriphClockCmd(RCC_APB1Periph_USARTx, ENABLE) for USART2, USART3, 
  28:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           UART4 or UART5.
  29:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
ARM GAS  /tmp/ccxSMOfF.s 			page 2


  30:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) According to the USART mode, enable the GPIO clocks using 
  31:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           RCC_AHB1PeriphClockCmd() function. (The I/O can be TX, RX, CTS, 
  32:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           or/and SCLK). 
  33:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
  34:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Peripheral's alternate function: 
  35:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Connect the pin to the desired peripherals' Alternate 
  36:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             Function (AF) using GPIO_PinAFConfig() function
  37:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Configure the desired pin in alternate function by:
  38:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  39:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Select the type, pull-up/pull-down and output speed via 
  40:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             GPIO_PuPd, GPIO_OType and GPIO_Speed members
  41:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Call GPIO_Init() function
  42:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           
  43:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Program the Baud Rate, Word Length , Stop Bit, Parity, Hardware 
  44:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           flow control and Mode(Receiver/Transmitter) using the USART_Init()
  45:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           function.
  46:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
  47:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) For synchronous mode, enable the clock and program the polarity,
  48:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           phase and last bit using the USART_ClockInit() function.
  49:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
  50:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable the NVIC and the corresponding interrupt using the function 
  51:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****          USART_ITConfig() if you need to use interrupt mode. 
  52:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
  53:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) When using the DMA mode 
  54:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Configure the DMA using DMA_Init() function
  55:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Active the needed channel Request using USART_DMACmd() function
  56:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    
  57:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
  58:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    
  59:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable the DMA using the DMA_Cmd() function, when using DMA mode. 
  60:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
  61:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       -@- Refer to Multi-Processor, LIN, half-duplex, Smartcard, IrDA sub-sections
  62:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           for more details
  63:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
  64:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]        
  65:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     In order to reach higher communication baudrates, it is possible to
  66:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     enable the oversampling by 8 mode using the function USART_OverSampling8Cmd().
  67:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     This function should be called after enabling the USART clock (RCC_APBxPeriphClockCmd())
  68:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     and before calling the function USART_Init().
  69:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             
  70:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     @endverbatim        
  71:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************
  72:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @attention
  73:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  74:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * <h2><center>&copy; COPYRIGHT 2015 STMicroelectronics</center></h2>
  75:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  76:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  77:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * You may not use this file except in compliance with the License.
  78:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * You may obtain a copy of the License at:
  79:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  80:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  81:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  82:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * Unless required by applicable law or agreed to in writing, software 
  83:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  84:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  85:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * See the License for the specific language governing permissions and
  86:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * limitations under the License.
ARM GAS  /tmp/ccxSMOfF.s 			page 3


  87:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  88:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************  
  89:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */ 
  90:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  91:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Includes ------------------------------------------------------------------*/
  92:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #include "stm32f4xx_usart.h"
  93:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #include "stm32f4xx_rcc.h"
  94:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  95:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  96:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
  97:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
  98:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  99:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART 
 100:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief USART driver modules
 101:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 102:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 103:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 104:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private typedef -----------------------------------------------------------*/
 105:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private define ------------------------------------------------------------*/
 106:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 107:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR1 register clear Mask ((~(uint16_t)0xE9F3)) */
 108:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR1_CLEAR_MASK            ((uint16_t)(USART_CR1_M | USART_CR1_PCE | \
 109:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR1_PS | USART_CR1_TE | \
 110:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR1_RE))
 111:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 112:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR2 register clock bits clear Mask ((~(uint16_t)0xF0FF)) */
 113:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR2_CLOCK_CLEAR_MASK      ((uint16_t)(USART_CR2_CLKEN | USART_CR2_CPOL | \
 114:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR2_CPHA | USART_CR2_LBCL))
 115:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 116:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR3 register clear Mask ((~(uint16_t)0xFCFF)) */
 117:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR3_CLEAR_MASK            ((uint16_t)(USART_CR3_RTSE | USART_CR3_CTSE))
 118:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 119:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART Interrupts mask */
 120:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define IT_MASK                   ((uint16_t)0x001F)
 121:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 122:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private macro -------------------------------------------------------------*/
 123:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private variables ---------------------------------------------------------*/
 124:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private function prototypes -----------------------------------------------*/
 125:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private functions ---------------------------------------------------------*/
 126:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 127:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Private_Functions
 128:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 129:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 130:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 131:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group1 Initialization and Configuration functions
 132:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Initialization and Configuration functions 
 133:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 134:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 135:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 136:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             ##### Initialization and Configuration functions #####
 137:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 138:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 139:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to initialize the USART 
 140:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     in asynchronous and in synchronous modes.
 141:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (+) For the asynchronous mode only these parameters can be configured: 
 142:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Baud Rate
 143:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Word Length 
ARM GAS  /tmp/ccxSMOfF.s 			page 4


 144:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Stop Bit
 145:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
 146:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****              in the data register is transmitted but is changed by the parity bit.
 147:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****              Depending on the frame length defined by the M bit (8-bits or 9-bits),
 148:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****              the possible USART frame formats are as listed in the following table:
 149:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    +-------------------------------------------------------------+     
 150:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |   M bit |  PCE bit  |            USART frame                |
 151:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------------------|---------------------------------------|             
 152:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    0    |    0      |    | SB | 8 bit data | STB |          |
 153:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 154:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 155:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 156:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    1    |    0      |    | SB | 9 bit data | STB |          |
 157:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 158:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 159:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    +-------------------------------------------------------------+            
 160:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Hardware flow control
 161:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Receiver/transmitter modes
 162:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 163:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 164:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     The USART_Init() function follows the USART  asynchronous configuration 
 165:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     procedure (details for the procedure are available in reference manual (RM0090)).
 166:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 167:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      (+) For the synchronous mode in addition to the asynchronous mode parameters these 
 168:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****          parameters should be also configured:
 169:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) USART Clock Enabled
 170:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) USART polarity
 171:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) USART phase
 172:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) USART LastBit
 173:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 174:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 175:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     These parameters can be configured using the USART_ClockInit() function.
 176:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 177:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 178:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 179:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 180:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 181:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 182:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Deinitializes the USARTx peripheral registers to their default reset values.
 183:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 184:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 185:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 186:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 187:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_DeInit(USART_TypeDef* USARTx)
 188:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
  30              		.loc 1 188 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 188 1 is_stmt 0 view .LVU1
  35 0000 08B5     		push	{r3, lr}
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 3, -8
  38              		.cfi_offset 14, -4
 189:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 190:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
  39              		.loc 1 190 3 is_stmt 1 view .LVU2
ARM GAS  /tmp/ccxSMOfF.s 			page 5


 191:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 192:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USARTx == USART1)
  40              		.loc 1 192 3 view .LVU3
  41              		.loc 1 192 6 is_stmt 0 view .LVU4
  42 0002 364B     		ldr	r3, .L19
  43 0004 9842     		cmp	r0, r3
  44 0006 15D0     		beq	.L11
 193:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 194:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 195:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 196:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 197:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == USART2)
  45              		.loc 1 197 8 is_stmt 1 view .LVU5
  46              		.loc 1 197 11 is_stmt 0 view .LVU6
  47 0008 354B     		ldr	r3, .L19+4
  48 000a 9842     		cmp	r0, r3
  49 000c 1BD0     		beq	.L12
 198:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 199:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 200:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 201:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 202:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == USART3)
  50              		.loc 1 202 8 is_stmt 1 view .LVU7
  51              		.loc 1 202 11 is_stmt 0 view .LVU8
  52 000e 354B     		ldr	r3, .L19+8
  53 0010 9842     		cmp	r0, r3
  54 0012 23D0     		beq	.L13
 203:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 204:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 205:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 206:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }    
 207:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == UART4)
  55              		.loc 1 207 8 is_stmt 1 view .LVU9
  56              		.loc 1 207 11 is_stmt 0 view .LVU10
  57 0014 344B     		ldr	r3, .L19+12
  58 0016 9842     		cmp	r0, r3
  59 0018 2BD0     		beq	.L14
 208:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 209:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 210:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 211:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 212:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == UART5)
  60              		.loc 1 212 8 is_stmt 1 view .LVU11
  61              		.loc 1 212 11 is_stmt 0 view .LVU12
  62 001a 344B     		ldr	r3, .L19+16
  63 001c 9842     		cmp	r0, r3
  64 001e 33D0     		beq	.L15
 213:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 214:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 215:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 216:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }  
 217:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == USART6)
  65              		.loc 1 217 8 is_stmt 1 view .LVU13
  66              		.loc 1 217 11 is_stmt 0 view .LVU14
  67 0020 334B     		ldr	r3, .L19+20
  68 0022 9842     		cmp	r0, r3
  69 0024 3BD0     		beq	.L16
ARM GAS  /tmp/ccxSMOfF.s 			page 6


 218:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 219:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 220:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 221:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 222:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == UART7)
  70              		.loc 1 222 8 is_stmt 1 view .LVU15
  71              		.loc 1 222 11 is_stmt 0 view .LVU16
  72 0026 334B     		ldr	r3, .L19+24
  73 0028 9842     		cmp	r0, r3
  74 002a 41D0     		beq	.L17
 223:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 224:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 225:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 226:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }     
 227:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 228:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 229:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     if (USARTx == UART8)
  75              		.loc 1 229 5 is_stmt 1 view .LVU17
  76              		.loc 1 229 8 is_stmt 0 view .LVU18
  77 002c 324B     		ldr	r3, .L19+28
  78 002e 9842     		cmp	r0, r3
  79 0030 49D0     		beq	.L18
  80              	.LVL1:
  81              	.L1:
 230:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     { 
 231:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 232:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 233:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     }
 234:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 235:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
  82              		.loc 1 235 1 view .LVU19
  83 0032 08BD     		pop	{r3, pc}
  84              	.LVL2:
  85              	.L11:
 194:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  86              		.loc 1 194 5 is_stmt 1 view .LVU20
  87 0034 0121     		movs	r1, #1
  88 0036 1020     		movs	r0, #16
  89              	.LVL3:
 194:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  90              		.loc 1 194 5 is_stmt 0 view .LVU21
  91 0038 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  92              	.LVL4:
 195:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
  93              		.loc 1 195 5 is_stmt 1 view .LVU22
  94 003c 0021     		movs	r1, #0
  95 003e 1020     		movs	r0, #16
  96 0040 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  97              	.LVL5:
  98 0044 F5E7     		b	.L1
  99              	.LVL6:
 100              	.L12:
 199:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 101              		.loc 1 199 5 view .LVU23
 102 0046 0121     		movs	r1, #1
 103 0048 4FF40030 		mov	r0, #131072
 104              	.LVL7:
ARM GAS  /tmp/ccxSMOfF.s 			page 7


 199:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 105              		.loc 1 199 5 is_stmt 0 view .LVU24
 106 004c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 107              	.LVL8:
 200:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 108              		.loc 1 200 5 is_stmt 1 view .LVU25
 109 0050 0021     		movs	r1, #0
 110 0052 4FF40030 		mov	r0, #131072
 111 0056 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 112              	.LVL9:
 113 005a EAE7     		b	.L1
 114              	.LVL10:
 115              	.L13:
 204:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 116              		.loc 1 204 5 view .LVU26
 117 005c 0121     		movs	r1, #1
 118 005e 4FF48020 		mov	r0, #262144
 119              	.LVL11:
 204:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 120              		.loc 1 204 5 is_stmt 0 view .LVU27
 121 0062 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 122              	.LVL12:
 205:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }    
 123              		.loc 1 205 5 is_stmt 1 view .LVU28
 124 0066 0021     		movs	r1, #0
 125 0068 4FF48020 		mov	r0, #262144
 126 006c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 127              	.LVL13:
 128 0070 DFE7     		b	.L1
 129              	.LVL14:
 130              	.L14:
 209:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 131              		.loc 1 209 5 view .LVU29
 132 0072 0121     		movs	r1, #1
 133 0074 4FF40020 		mov	r0, #524288
 134              	.LVL15:
 209:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 135              		.loc 1 209 5 is_stmt 0 view .LVU30
 136 0078 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 137              	.LVL16:
 210:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 138              		.loc 1 210 5 is_stmt 1 view .LVU31
 139 007c 0021     		movs	r1, #0
 140 007e 4FF40020 		mov	r0, #524288
 141 0082 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 142              	.LVL17:
 143 0086 D4E7     		b	.L1
 144              	.LVL18:
 145              	.L15:
 214:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 146              		.loc 1 214 5 view .LVU32
 147 0088 0121     		movs	r1, #1
 148 008a 4FF48010 		mov	r0, #1048576
 149              	.LVL19:
 214:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 150              		.loc 1 214 5 is_stmt 0 view .LVU33
 151 008e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
ARM GAS  /tmp/ccxSMOfF.s 			page 8


 152              	.LVL20:
 215:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }  
 153              		.loc 1 215 5 is_stmt 1 view .LVU34
 154 0092 0021     		movs	r1, #0
 155 0094 4FF48010 		mov	r0, #1048576
 156 0098 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 157              	.LVL21:
 158 009c C9E7     		b	.L1
 159              	.LVL22:
 160              	.L16:
 219:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 161              		.loc 1 219 5 view .LVU35
 162 009e 0121     		movs	r1, #1
 163 00a0 2020     		movs	r0, #32
 164              	.LVL23:
 219:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 165              		.loc 1 219 5 is_stmt 0 view .LVU36
 166 00a2 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 167              	.LVL24:
 220:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 168              		.loc 1 220 5 is_stmt 1 view .LVU37
 169 00a6 0021     		movs	r1, #0
 170 00a8 2020     		movs	r0, #32
 171 00aa FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 172              	.LVL25:
 173 00ae C0E7     		b	.L1
 174              	.LVL26:
 175              	.L17:
 224:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 176              		.loc 1 224 5 view .LVU38
 177 00b0 0121     		movs	r1, #1
 178 00b2 4FF08040 		mov	r0, #1073741824
 179              	.LVL27:
 224:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 180              		.loc 1 224 5 is_stmt 0 view .LVU39
 181 00b6 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 182              	.LVL28:
 225:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }     
 183              		.loc 1 225 5 is_stmt 1 view .LVU40
 184 00ba 0021     		movs	r1, #0
 185 00bc 4FF08040 		mov	r0, #1073741824
 186 00c0 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 187              	.LVL29:
 188 00c4 B5E7     		b	.L1
 189              	.LVL30:
 190              	.L18:
 231:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 191              		.loc 1 231 7 view .LVU41
 192 00c6 0121     		movs	r1, #1
 193 00c8 4FF00040 		mov	r0, #-2147483648
 194              	.LVL31:
 231:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 195              		.loc 1 231 7 is_stmt 0 view .LVU42
 196 00cc FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 197              	.LVL32:
 232:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     }
 198              		.loc 1 232 7 is_stmt 1 view .LVU43
ARM GAS  /tmp/ccxSMOfF.s 			page 9


 199 00d0 0021     		movs	r1, #0
 200 00d2 4FF00040 		mov	r0, #-2147483648
 201 00d6 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 202              	.LVL33:
 203              		.loc 1 235 1 is_stmt 0 view .LVU44
 204 00da AAE7     		b	.L1
 205              	.L20:
 206              		.align	2
 207              	.L19:
 208 00dc 00100140 		.word	1073811456
 209 00e0 00440040 		.word	1073759232
 210 00e4 00480040 		.word	1073760256
 211 00e8 004C0040 		.word	1073761280
 212 00ec 00500040 		.word	1073762304
 213 00f0 00140140 		.word	1073812480
 214 00f4 00780040 		.word	1073772544
 215 00f8 007C0040 		.word	1073773568
 216              		.cfi_endproc
 217              	.LFE123:
 219              		.section	.text.USART_Init,"ax",%progbits
 220              		.align	1
 221              		.global	USART_Init
 222              		.syntax unified
 223              		.thumb
 224              		.thumb_func
 226              	USART_Init:
 227              	.LVL34:
 228              	.LFB124:
 236:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 237:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 238:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Initializes the USARTx peripheral according to the specified
 239:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         parameters in the USART_InitStruct .
 240:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 241:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 242:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
 243:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         the configuration information for the specified USART peripheral.
 244:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 245:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 246:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
 247:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 229              		.loc 1 247 1 is_stmt 1 view -0
 230              		.cfi_startproc
 231              		@ args = 0, pretend = 0, frame = 16
 232              		@ frame_needed = 0, uses_anonymous_args = 0
 233              		.loc 1 247 1 is_stmt 0 view .LVU46
 234 0000 30B5     		push	{r4, r5, lr}
 235              		.cfi_def_cfa_offset 12
 236              		.cfi_offset 4, -12
 237              		.cfi_offset 5, -8
 238              		.cfi_offset 14, -4
 239 0002 85B0     		sub	sp, sp, #20
 240              		.cfi_def_cfa_offset 32
 241 0004 0446     		mov	r4, r0
 242 0006 0D46     		mov	r5, r1
 248:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00, apbclock = 0x00;
 243              		.loc 1 248 3 is_stmt 1 view .LVU47
 244              	.LVL35:
ARM GAS  /tmp/ccxSMOfF.s 			page 10


 249:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t integerdivider = 0x00;
 245              		.loc 1 249 3 view .LVU48
 250:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t fractionaldivider = 0x00;
 246              		.loc 1 250 3 view .LVU49
 251:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   RCC_ClocksTypeDef RCC_ClocksStatus;
 247              		.loc 1 251 3 view .LVU50
 252:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 253:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 254:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 248              		.loc 1 254 3 view .LVU51
 255:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 249              		.loc 1 255 3 view .LVU52
 256:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 250              		.loc 1 256 3 view .LVU53
 257:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 251              		.loc 1 257 3 view .LVU54
 258:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 252              		.loc 1 258 3 view .LVU55
 259:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 253              		.loc 1 259 3 view .LVU56
 260:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 254              		.loc 1 260 3 view .LVU57
 261:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 262:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
 263:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 255              		.loc 1 263 3 view .LVU58
 264:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 265:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
 256              		.loc 1 265 5 view .LVU59
 266:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 267:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 268:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 269:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 257              		.loc 1 269 3 view .LVU60
 258              		.loc 1 269 18 is_stmt 0 view .LVU61
 259 0008 038A     		ldrh	r3, [r0, #16]
 260 000a 9BB2     		uxth	r3, r3
 261              	.LVL36:
 270:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 271:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear STOP[13:12] bits */
 272:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 262              		.loc 1 272 3 is_stmt 1 view .LVU62
 263              		.loc 1 272 10 is_stmt 0 view .LVU63
 264 000c 23F44053 		bic	r3, r3, #12288
 265              	.LVL37:
 273:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 274:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
 275:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       Set STOP[13:12] bits according to USART_StopBits value */
 276:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 266              		.loc 1 276 3 is_stmt 1 view .LVU64
 267              		.loc 1 276 39 is_stmt 0 view .LVU65
 268 0010 CA88     		ldrh	r2, [r1, #6]
 269              	.LVL38:
 277:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 278:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR2 */
 279:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 270              		.loc 1 279 3 is_stmt 1 view .LVU66
ARM GAS  /tmp/ccxSMOfF.s 			page 11


 271              		.loc 1 279 17 is_stmt 0 view .LVU67
 272 0012 1343     		orrs	r3, r3, r2
 273              	.LVL39:
 274              		.loc 1 279 15 view .LVU68
 275 0014 0382     		strh	r3, [r0, #16]	@ movhi
 280:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 281:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR1 Configuration -----------------------*/
 282:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR1;
 276              		.loc 1 282 3 is_stmt 1 view .LVU69
 277              		.loc 1 282 18 is_stmt 0 view .LVU70
 278 0016 8389     		ldrh	r3, [r0, #12]
 279              	.LVL40:
 280              		.loc 1 282 18 view .LVU71
 281 0018 9BB2     		uxth	r3, r3
 282              	.LVL41:
 283:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 284:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear M, PCE, PS, TE and RE bits */
 285:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 283              		.loc 1 285 3 is_stmt 1 view .LVU72
 284              		.loc 1 285 10 is_stmt 0 view .LVU73
 285 001a 23F4B053 		bic	r3, r3, #5632
 286              	.LVL42:
 287              		.loc 1 285 10 view .LVU74
 288 001e 23F00C03 		bic	r3, r3, #12
 289              	.LVL43:
 286:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 287:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Word Length, Parity and mode: 
 288:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set the M bits according to USART_WordLength value 
 289:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set PCE and PS bits according to USART_Parity value
 290:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set TE and RE bits according to USART_Mode value */
 291:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 290              		.loc 1 291 3 is_stmt 1 view .LVU75
 291              		.loc 1 291 39 is_stmt 0 view .LVU76
 292 0022 8988     		ldrh	r1, [r1, #4]
 293              	.LVL44:
 294              		.loc 1 291 76 view .LVU77
 295 0024 2889     		ldrh	r0, [r5, #8]
 296              	.LVL45:
 292:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             USART_InitStruct->USART_Mode;
 297              		.loc 1 292 29 view .LVU78
 298 0026 6A89     		ldrh	r2, [r5, #10]
 291:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             USART_InitStruct->USART_Mode;
 299              		.loc 1 291 91 view .LVU79
 300 0028 0143     		orrs	r1, r1, r0
 301 002a 0A43     		orrs	r2, r2, r1
 302              	.LVL46:
 293:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 294:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR1 */
 295:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 = (uint16_t)tmpreg;
 303              		.loc 1 295 3 is_stmt 1 view .LVU80
 304              		.loc 1 295 17 is_stmt 0 view .LVU81
 305 002c 1343     		orrs	r3, r3, r2
 306              	.LVL47:
 307              		.loc 1 295 15 view .LVU82
 308 002e A381     		strh	r3, [r4, #12]	@ movhi
 296:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 297:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR3 Configuration -----------------------*/  
ARM GAS  /tmp/ccxSMOfF.s 			page 12


 298:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR3;
 309              		.loc 1 298 3 is_stmt 1 view .LVU83
 310              		.loc 1 298 18 is_stmt 0 view .LVU84
 311 0030 A38A     		ldrh	r3, [r4, #20]
 312              	.LVL48:
 313              		.loc 1 298 18 view .LVU85
 314 0032 9BB2     		uxth	r3, r3
 315              	.LVL49:
 299:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 300:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear CTSE and RTSE bits */
 301:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 316              		.loc 1 301 3 is_stmt 1 view .LVU86
 317              		.loc 1 301 10 is_stmt 0 view .LVU87
 318 0034 23F44073 		bic	r3, r3, #768
 319              	.LVL50:
 302:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 303:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART HFC : 
 304:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
 305:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 320              		.loc 1 305 3 is_stmt 1 view .LVU88
 321              		.loc 1 305 29 is_stmt 0 view .LVU89
 322 0038 AA89     		ldrh	r2, [r5, #12]
 323              	.LVL51:
 306:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 307:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR3 */
 308:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 = (uint16_t)tmpreg;
 324              		.loc 1 308 3 is_stmt 1 view .LVU90
 325              		.loc 1 308 17 is_stmt 0 view .LVU91
 326 003a 1343     		orrs	r3, r3, r2
 327              	.LVL52:
 328              		.loc 1 308 15 view .LVU92
 329 003c A382     		strh	r3, [r4, #20]	@ movhi
 309:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 310:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART BRR Configuration -----------------------*/
 311:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Baud Rate */
 312:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   RCC_GetClocksFreq(&RCC_ClocksStatus);
 330              		.loc 1 312 3 is_stmt 1 view .LVU93
 331 003e 6846     		mov	r0, sp
 332 0040 FFF7FEFF 		bl	RCC_GetClocksFreq
 333              	.LVL53:
 313:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 314:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx == USART1) || (USARTx == USART6))
 334              		.loc 1 314 3 view .LVU94
 335              		.loc 1 314 6 is_stmt 0 view .LVU95
 336 0044 1F4B     		ldr	r3, .L32
 337 0046 9C42     		cmp	r4, r3
 338 0048 05D0     		beq	.L22
 339              		.loc 1 314 26 discriminator 1 view .LVU96
 340 004a 03F58063 		add	r3, r3, #1024
 341 004e 9C42     		cmp	r4, r3
 342 0050 01D0     		beq	.L22
 315:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 316:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 317:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 318:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 319:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 320:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK1_Frequency;
ARM GAS  /tmp/ccxSMOfF.s 			page 13


 343              		.loc 1 320 5 is_stmt 1 view .LVU97
 344              		.loc 1 320 14 is_stmt 0 view .LVU98
 345 0052 029B     		ldr	r3, [sp, #8]
 346              	.LVL54:
 347              		.loc 1 320 14 view .LVU99
 348 0054 00E0     		b	.L24
 349              	.LVL55:
 350              	.L22:
 316:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 351              		.loc 1 316 5 is_stmt 1 view .LVU100
 316:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 352              		.loc 1 316 14 is_stmt 0 view .LVU101
 353 0056 039B     		ldr	r3, [sp, #12]
 354              	.LVL56:
 355              	.L24:
 321:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 322:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 323:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Determine the integer part */
 324:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 356              		.loc 1 324 3 is_stmt 1 view .LVU102
 357              		.loc 1 324 14 is_stmt 0 view .LVU103
 358 0058 A289     		ldrh	r2, [r4, #12]
 359              		.loc 1 324 6 view .LVU104
 360 005a 12F4004F 		tst	r2, #32768
 361 005e 1FD1     		bne	.L30
 325:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 326:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Integer part computing in case Oversampling mode is 8 Samples */
 327:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 328:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 329:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 330:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 331:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Integer part computing in case Oversampling mode is 16 Samples */
 332:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 362              		.loc 1 332 5 is_stmt 1 view .LVU105
 363              		.loc 1 332 27 is_stmt 0 view .LVU106
 364 0060 03EB8303 		add	r3, r3, r3, lsl #2
 365              	.LVL57:
 366              		.loc 1 332 27 view .LVU107
 367 0064 03EB8303 		add	r3, r3, r3, lsl #2
 368              		.loc 1 332 63 view .LVU108
 369 0068 2A68     		ldr	r2, [r5]
 370              		.loc 1 332 44 view .LVU109
 371 006a 9200     		lsls	r2, r2, #2
 372              		.loc 1 332 20 view .LVU110
 373 006c B3FBF2F3 		udiv	r3, r3, r2
 374              	.LVL58:
 375              	.L26:
 333:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 334:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = (integerdivider / 100) << 4;
 376              		.loc 1 334 3 is_stmt 1 view .LVU111
 377              		.loc 1 334 28 is_stmt 0 view .LVU112
 378 0070 154A     		ldr	r2, .L32+4
 379 0072 A2FB0312 		umull	r1, r2, r2, r3
 380 0076 5209     		lsrs	r2, r2, #5
 381              		.loc 1 334 10 view .LVU113
 382 0078 1101     		lsls	r1, r2, #4
 383              	.LVL59:
ARM GAS  /tmp/ccxSMOfF.s 			page 14


 335:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 336:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Determine the fractional part */
 337:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 384              		.loc 1 337 3 is_stmt 1 view .LVU114
 385              		.loc 1 337 21 is_stmt 0 view .LVU115
 386 007a 6420     		movs	r0, #100
 387 007c 02FB1033 		mls	r3, r2, r0, r3
 388              	.LVL60:
 338:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 339:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Implement the fractional part in the register */
 340:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 389              		.loc 1 340 3 is_stmt 1 view .LVU116
 390              		.loc 1 340 14 is_stmt 0 view .LVU117
 391 0080 A289     		ldrh	r2, [r4, #12]
 392              		.loc 1 340 6 view .LVU118
 393 0082 12F4004F 		tst	r2, #32768
 394 0086 14D1     		bne	.L31
 341:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 342:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 343:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 344:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 345:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 346:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 395              		.loc 1 346 5 is_stmt 1 view .LVU119
 396              		.loc 1 346 37 is_stmt 0 view .LVU120
 397 0088 1B01     		lsls	r3, r3, #4
 398              	.LVL61:
 399              		.loc 1 346 43 view .LVU121
 400 008a 3233     		adds	r3, r3, #50
 401              		.loc 1 346 49 view .LVU122
 402 008c 0E4A     		ldr	r2, .L32+4
 403 008e A2FB0323 		umull	r2, r3, r2, r3
 404              		.loc 1 346 57 view .LVU123
 405 0092 C3F34313 		ubfx	r3, r3, #5, #4
 406              		.loc 1 346 12 view .LVU124
 407 0096 0B43     		orrs	r3, r3, r1
 408              	.LVL62:
 409              	.L28:
 347:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 348:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 349:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART BRR register */
 350:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->BRR = (uint16_t)tmpreg;
 410              		.loc 1 350 3 is_stmt 1 view .LVU125
 411              		.loc 1 350 17 is_stmt 0 view .LVU126
 412 0098 9BB2     		uxth	r3, r3
 413              	.LVL63:
 414              		.loc 1 350 15 view .LVU127
 415 009a 2381     		strh	r3, [r4, #8]	@ movhi
 351:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 416              		.loc 1 351 1 view .LVU128
 417 009c 05B0     		add	sp, sp, #20
 418              		.cfi_remember_state
 419              		.cfi_def_cfa_offset 12
 420              		@ sp needed
 421 009e 30BD     		pop	{r4, r5, pc}
 422              	.LVL64:
 423              	.L30:
ARM GAS  /tmp/ccxSMOfF.s 			page 15


 424              		.cfi_restore_state
 327:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 425              		.loc 1 327 5 is_stmt 1 view .LVU129
 327:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 426              		.loc 1 327 27 is_stmt 0 view .LVU130
 427 00a0 03EB8303 		add	r3, r3, r3, lsl #2
 428              	.LVL65:
 327:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 429              		.loc 1 327 27 view .LVU131
 430 00a4 03EB8303 		add	r3, r3, r3, lsl #2
 327:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 431              		.loc 1 327 63 view .LVU132
 432 00a8 2A68     		ldr	r2, [r5]
 327:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 433              		.loc 1 327 44 view .LVU133
 434 00aa 5200     		lsls	r2, r2, #1
 327:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 435              		.loc 1 327 20 view .LVU134
 436 00ac B3FBF2F3 		udiv	r3, r3, r2
 437              	.LVL66:
 327:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 438              		.loc 1 327 20 view .LVU135
 439 00b0 DEE7     		b	.L26
 440              	.LVL67:
 441              	.L31:
 342:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 442              		.loc 1 342 5 is_stmt 1 view .LVU136
 342:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 443              		.loc 1 342 37 is_stmt 0 view .LVU137
 444 00b2 DB00     		lsls	r3, r3, #3
 445              	.LVL68:
 342:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 446              		.loc 1 342 42 view .LVU138
 447 00b4 3233     		adds	r3, r3, #50
 342:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 448              		.loc 1 342 48 view .LVU139
 449 00b6 044A     		ldr	r2, .L32+4
 450 00b8 A2FB0323 		umull	r2, r3, r2, r3
 342:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 451              		.loc 1 342 56 view .LVU140
 452 00bc C3F34213 		ubfx	r3, r3, #5, #3
 342:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 453              		.loc 1 342 12 view .LVU141
 454 00c0 0B43     		orrs	r3, r3, r1
 455              	.LVL69:
 342:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 456              		.loc 1 342 12 view .LVU142
 457 00c2 E9E7     		b	.L28
 458              	.L33:
 459              		.align	2
 460              	.L32:
 461 00c4 00100140 		.word	1073811456
 462 00c8 1F85EB51 		.word	1374389535
 463              		.cfi_endproc
 464              	.LFE124:
 466              		.section	.text.USART_StructInit,"ax",%progbits
 467              		.align	1
ARM GAS  /tmp/ccxSMOfF.s 			page 16


 468              		.global	USART_StructInit
 469              		.syntax unified
 470              		.thumb
 471              		.thumb_func
 473              	USART_StructInit:
 474              	.LVL70:
 475              	.LFB125:
 352:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 353:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 354:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Fills each USART_InitStruct member with its default value.
 355:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
 356:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         be initialized.
 357:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 358:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 359:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
 360:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 476              		.loc 1 360 1 is_stmt 1 view -0
 477              		.cfi_startproc
 478              		@ args = 0, pretend = 0, frame = 0
 479              		@ frame_needed = 0, uses_anonymous_args = 0
 480              		@ link register save eliminated.
 361:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* USART_InitStruct members default value */
 362:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_BaudRate = 9600;
 481              		.loc 1 362 3 view .LVU144
 482              		.loc 1 362 36 is_stmt 0 view .LVU145
 483 0000 4FF41653 		mov	r3, #9600
 484 0004 0360     		str	r3, [r0]
 363:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 485              		.loc 1 363 3 is_stmt 1 view .LVU146
 486              		.loc 1 363 38 is_stmt 0 view .LVU147
 487 0006 0023     		movs	r3, #0
 488 0008 8380     		strh	r3, [r0, #4]	@ movhi
 364:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_StopBits = USART_StopBits_1;
 489              		.loc 1 364 3 is_stmt 1 view .LVU148
 490              		.loc 1 364 36 is_stmt 0 view .LVU149
 491 000a C380     		strh	r3, [r0, #6]	@ movhi
 365:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_Parity = USART_Parity_No ;
 492              		.loc 1 365 3 is_stmt 1 view .LVU150
 493              		.loc 1 365 34 is_stmt 0 view .LVU151
 494 000c 0381     		strh	r3, [r0, #8]	@ movhi
 366:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 495              		.loc 1 366 3 is_stmt 1 view .LVU152
 496              		.loc 1 366 32 is_stmt 0 view .LVU153
 497 000e 0C22     		movs	r2, #12
 498 0010 4281     		strh	r2, [r0, #10]	@ movhi
 367:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 499              		.loc 1 367 3 is_stmt 1 view .LVU154
 500              		.loc 1 367 47 is_stmt 0 view .LVU155
 501 0012 8381     		strh	r3, [r0, #12]	@ movhi
 368:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 502              		.loc 1 368 1 view .LVU156
 503 0014 7047     		bx	lr
 504              		.cfi_endproc
 505              	.LFE125:
 507              		.section	.text.USART_ClockInit,"ax",%progbits
 508              		.align	1
 509              		.global	USART_ClockInit
ARM GAS  /tmp/ccxSMOfF.s 			page 17


 510              		.syntax unified
 511              		.thumb
 512              		.thumb_func
 514              	USART_ClockInit:
 515              	.LVL71:
 516              	.LFB126:
 369:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 370:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 371:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Initializes the USARTx peripheral Clock according to the 
 372:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         specified parameters in the USART_ClockInitStruct .
 373:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART peripheral.
 374:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure that
 375:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         contains the configuration information for the specified  USART peripheral.
 376:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
 377:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 378:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 379:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
 380:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 517              		.loc 1 380 1 is_stmt 1 view -0
 518              		.cfi_startproc
 519              		@ args = 0, pretend = 0, frame = 0
 520              		@ frame_needed = 0, uses_anonymous_args = 0
 521              		.loc 1 380 1 is_stmt 0 view .LVU158
 522 0000 10B5     		push	{r4, lr}
 523              		.cfi_def_cfa_offset 8
 524              		.cfi_offset 4, -8
 525              		.cfi_offset 14, -4
 381:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00;
 526              		.loc 1 381 3 is_stmt 1 view .LVU159
 527              	.LVL72:
 382:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 383:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 528              		.loc 1 383 3 view .LVU160
 384:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
 529              		.loc 1 384 3 view .LVU161
 385:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
 530              		.loc 1 385 3 view .LVU162
 386:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
 531              		.loc 1 386 3 view .LVU163
 387:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
 532              		.loc 1 387 3 view .LVU164
 388:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 389:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 390:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 533              		.loc 1 390 3 view .LVU165
 534              		.loc 1 390 18 is_stmt 0 view .LVU166
 535 0002 038A     		ldrh	r3, [r0, #16]
 536 0004 9BB2     		uxth	r3, r3
 537              	.LVL73:
 391:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear CLKEN, CPOL, CPHA and LBCL bits */
 392:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 538              		.loc 1 392 3 is_stmt 1 view .LVU167
 539              		.loc 1 392 10 is_stmt 0 view .LVU168
 540 0006 23F47062 		bic	r2, r3, #3840
 541              	.LVL74:
 393:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
 394:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CLKEN bit according to USART_Clock value */
ARM GAS  /tmp/ccxSMOfF.s 			page 18


 395:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CPOL bit according to USART_CPOL value */
 396:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CPHA bit according to USART_CPHA value */
 397:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set LBCL bit according to USART_LastBit value */
 398:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 542              		.loc 1 398 3 is_stmt 1 view .LVU169
 543              		.loc 1 398 44 is_stmt 0 view .LVU170
 544 000a B1F800E0 		ldrh	lr, [r1]
 545              		.loc 1 398 81 view .LVU171
 546 000e 4C88     		ldrh	r4, [r1, #2]
 399:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                  USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 547              		.loc 1 399 39 view .LVU172
 548 0010 B1F804C0 		ldrh	ip, [r1, #4]
 549              		.loc 1 399 75 view .LVU173
 550 0014 CB88     		ldrh	r3, [r1, #6]
 551              		.loc 1 399 52 view .LVU174
 552 0016 4EEA0401 		orr	r1, lr, r4
 553              	.LVL75:
 554              		.loc 1 399 52 view .LVU175
 555 001a 4CEA0101 		orr	r1, ip, r1
 556 001e 0B43     		orrs	r3, r3, r1
 557              	.LVL76:
 400:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR2 */
 401:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 558              		.loc 1 401 3 is_stmt 1 view .LVU176
 559              		.loc 1 401 17 is_stmt 0 view .LVU177
 560 0020 1343     		orrs	r3, r3, r2
 561              	.LVL77:
 562              		.loc 1 401 15 view .LVU178
 563 0022 0382     		strh	r3, [r0, #16]	@ movhi
 402:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 564              		.loc 1 402 1 view .LVU179
 565 0024 10BD     		pop	{r4, pc}
 566              		.cfi_endproc
 567              	.LFE126:
 569              		.section	.text.USART_ClockStructInit,"ax",%progbits
 570              		.align	1
 571              		.global	USART_ClockStructInit
 572              		.syntax unified
 573              		.thumb
 574              		.thumb_func
 576              	USART_ClockStructInit:
 577              	.LVL78:
 578              	.LFB127:
 403:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 404:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 405:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Fills each USART_ClockInitStruct member with its default value.
 406:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
 407:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         which will be initialized.
 408:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 409:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 410:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
 411:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 579              		.loc 1 411 1 is_stmt 1 view -0
 580              		.cfi_startproc
 581              		@ args = 0, pretend = 0, frame = 0
 582              		@ frame_needed = 0, uses_anonymous_args = 0
 583              		@ link register save eliminated.
ARM GAS  /tmp/ccxSMOfF.s 			page 19


 412:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* USART_ClockInitStruct members default value */
 413:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 584              		.loc 1 413 3 view .LVU181
 585              		.loc 1 413 38 is_stmt 0 view .LVU182
 586 0000 0023     		movs	r3, #0
 587 0002 0380     		strh	r3, [r0]	@ movhi
 414:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 588              		.loc 1 414 3 is_stmt 1 view .LVU183
 589              		.loc 1 414 37 is_stmt 0 view .LVU184
 590 0004 4380     		strh	r3, [r0, #2]	@ movhi
 415:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 591              		.loc 1 415 3 is_stmt 1 view .LVU185
 592              		.loc 1 415 37 is_stmt 0 view .LVU186
 593 0006 8380     		strh	r3, [r0, #4]	@ movhi
 416:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 594              		.loc 1 416 3 is_stmt 1 view .LVU187
 595              		.loc 1 416 40 is_stmt 0 view .LVU188
 596 0008 C380     		strh	r3, [r0, #6]	@ movhi
 417:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 597              		.loc 1 417 1 view .LVU189
 598 000a 7047     		bx	lr
 599              		.cfi_endproc
 600              	.LFE127:
 602              		.section	.text.USART_Cmd,"ax",%progbits
 603              		.align	1
 604              		.global	USART_Cmd
 605              		.syntax unified
 606              		.thumb
 607              		.thumb_func
 609              	USART_Cmd:
 610              	.LVL79:
 611              	.LFB128:
 418:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 419:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 420:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the specified USART peripheral.
 421:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 422:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 423:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USARTx peripheral.
 424:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 425:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 426:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 427:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 428:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 612              		.loc 1 428 1 is_stmt 1 view -0
 613              		.cfi_startproc
 614              		@ args = 0, pretend = 0, frame = 0
 615              		@ frame_needed = 0, uses_anonymous_args = 0
 616              		@ link register save eliminated.
 429:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 430:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 617              		.loc 1 430 3 view .LVU191
 431:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 618              		.loc 1 431 3 view .LVU192
 432:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 433:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 619              		.loc 1 433 3 view .LVU193
 620              		.loc 1 433 6 is_stmt 0 view .LVU194
ARM GAS  /tmp/ccxSMOfF.s 			page 20


 621 0000 29B1     		cbz	r1, .L39
 434:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 435:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the selected USART by setting the UE bit in the CR1 register */
 436:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_UE;
 622              		.loc 1 436 5 is_stmt 1 view .LVU195
 623              		.loc 1 436 17 is_stmt 0 view .LVU196
 624 0002 8389     		ldrh	r3, [r0, #12]
 625 0004 9BB2     		uxth	r3, r3
 626 0006 43F40053 		orr	r3, r3, #8192
 627 000a 8381     		strh	r3, [r0, #12]	@ movhi
 628 000c 7047     		bx	lr
 629              	.L39:
 437:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 438:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 439:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 440:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the selected USART by clearing the UE bit in the CR1 register */
 441:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 630              		.loc 1 441 5 is_stmt 1 view .LVU197
 631              		.loc 1 441 17 is_stmt 0 view .LVU198
 632 000e 8389     		ldrh	r3, [r0, #12]
 633 0010 9BB2     		uxth	r3, r3
 634 0012 23F40053 		bic	r3, r3, #8192
 635 0016 9BB2     		uxth	r3, r3
 636 0018 8381     		strh	r3, [r0, #12]	@ movhi
 442:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 443:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 637              		.loc 1 443 1 view .LVU199
 638 001a 7047     		bx	lr
 639              		.cfi_endproc
 640              	.LFE128:
 642              		.section	.text.USART_SetPrescaler,"ax",%progbits
 643              		.align	1
 644              		.global	USART_SetPrescaler
 645              		.syntax unified
 646              		.thumb
 647              		.thumb_func
 649              	USART_SetPrescaler:
 650              	.LVL80:
 651              	.LFB129:
 444:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 445:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 446:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the system clock prescaler.
 447:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 448:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 449:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_Prescaler: specifies the prescaler clock. 
 450:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   The function is used for IrDA mode with UART4 and UART5.   
 451:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 452:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 453:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
 454:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** { 
 652              		.loc 1 454 1 is_stmt 1 view -0
 653              		.cfi_startproc
 654              		@ args = 0, pretend = 0, frame = 0
 655              		@ frame_needed = 0, uses_anonymous_args = 0
 656              		@ link register save eliminated.
 455:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 456:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
ARM GAS  /tmp/ccxSMOfF.s 			page 21


 657              		.loc 1 456 3 view .LVU201
 457:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 458:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART prescaler */
 459:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR &= USART_GTPR_GT;
 658              		.loc 1 459 3 view .LVU202
 659              		.loc 1 459 16 is_stmt 0 view .LVU203
 660 0000 028B     		ldrh	r2, [r0, #24]
 661 0002 02F47F42 		and	r2, r2, #65280
 662 0006 0283     		strh	r2, [r0, #24]	@ movhi
 460:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART prescaler */
 461:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR |= USART_Prescaler;
 663              		.loc 1 461 3 is_stmt 1 view .LVU204
 664              		.loc 1 461 16 is_stmt 0 view .LVU205
 665 0008 038B     		ldrh	r3, [r0, #24]
 666 000a 9BB2     		uxth	r3, r3
 667 000c 0B43     		orrs	r3, r3, r1
 668 000e 0383     		strh	r3, [r0, #24]	@ movhi
 462:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 669              		.loc 1 462 1 view .LVU206
 670 0010 7047     		bx	lr
 671              		.cfi_endproc
 672              	.LFE129:
 674              		.section	.text.USART_OverSampling8Cmd,"ax",%progbits
 675              		.align	1
 676              		.global	USART_OverSampling8Cmd
 677              		.syntax unified
 678              		.thumb
 679              		.thumb_func
 681              	USART_OverSampling8Cmd:
 682              	.LVL81:
 683              	.LFB130:
 463:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 464:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 465:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's 8x oversampling mode.
 466:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   This function has to be called before calling USART_Init() function
 467:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         in order to have correct baudrate Divider value.
 468:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 469:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 470:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART 8x oversampling mode.
 471:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 472:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 473:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 474:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 475:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 684              		.loc 1 475 1 is_stmt 1 view -0
 685              		.cfi_startproc
 686              		@ args = 0, pretend = 0, frame = 0
 687              		@ frame_needed = 0, uses_anonymous_args = 0
 688              		@ link register save eliminated.
 476:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 477:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 689              		.loc 1 477 3 view .LVU208
 478:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 690              		.loc 1 478 3 view .LVU209
 479:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 480:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 691              		.loc 1 480 3 view .LVU210
ARM GAS  /tmp/ccxSMOfF.s 			page 22


 692              		.loc 1 480 6 is_stmt 0 view .LVU211
 693 0000 39B1     		cbz	r1, .L43
 481:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 482:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
 483:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_OVER8;
 694              		.loc 1 483 5 is_stmt 1 view .LVU212
 695              		.loc 1 483 17 is_stmt 0 view .LVU213
 696 0002 8389     		ldrh	r3, [r0, #12]
 697 0004 6FEA4343 		mvn	r3, r3, lsl #17
 698 0008 6FEA5343 		mvn	r3, r3, lsr #17
 699 000c 9BB2     		uxth	r3, r3
 700 000e 8381     		strh	r3, [r0, #12]	@ movhi
 701 0010 7047     		bx	lr
 702              	.L43:
 484:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 485:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 486:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 487:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
 488:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 703              		.loc 1 488 5 is_stmt 1 view .LVU214
 704              		.loc 1 488 17 is_stmt 0 view .LVU215
 705 0012 8389     		ldrh	r3, [r0, #12]
 706 0014 C3F30E03 		ubfx	r3, r3, #0, #15
 707 0018 8381     		strh	r3, [r0, #12]	@ movhi
 489:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 490:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }  
 708              		.loc 1 490 1 view .LVU216
 709 001a 7047     		bx	lr
 710              		.cfi_endproc
 711              	.LFE130:
 713              		.section	.text.USART_OneBitMethodCmd,"ax",%progbits
 714              		.align	1
 715              		.global	USART_OneBitMethodCmd
 716              		.syntax unified
 717              		.thumb
 718              		.thumb_func
 720              	USART_OneBitMethodCmd:
 721              	.LVL82:
 722              	.LFB131:
 491:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 492:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 493:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's one bit sampling method.
 494:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 495:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 496:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART one bit sampling method.
 497:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 498:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 499:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 500:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 501:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 723              		.loc 1 501 1 is_stmt 1 view -0
 724              		.cfi_startproc
 725              		@ args = 0, pretend = 0, frame = 0
 726              		@ frame_needed = 0, uses_anonymous_args = 0
 727              		@ link register save eliminated.
 502:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 503:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
ARM GAS  /tmp/ccxSMOfF.s 			page 23


 728              		.loc 1 503 3 view .LVU218
 504:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 729              		.loc 1 504 3 view .LVU219
 505:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 506:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 730              		.loc 1 506 3 view .LVU220
 731              		.loc 1 506 6 is_stmt 0 view .LVU221
 732 0000 29B1     		cbz	r1, .L46
 507:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 508:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
 509:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_ONEBIT;
 733              		.loc 1 509 5 is_stmt 1 view .LVU222
 734              		.loc 1 509 17 is_stmt 0 view .LVU223
 735 0002 838A     		ldrh	r3, [r0, #20]
 736 0004 9BB2     		uxth	r3, r3
 737 0006 43F40063 		orr	r3, r3, #2048
 738 000a 8382     		strh	r3, [r0, #20]	@ movhi
 739 000c 7047     		bx	lr
 740              	.L46:
 510:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 511:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 512:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 513:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
 514:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 741              		.loc 1 514 5 is_stmt 1 view .LVU224
 742              		.loc 1 514 17 is_stmt 0 view .LVU225
 743 000e 838A     		ldrh	r3, [r0, #20]
 744 0010 9BB2     		uxth	r3, r3
 745 0012 23F40063 		bic	r3, r3, #2048
 746 0016 9BB2     		uxth	r3, r3
 747 0018 8382     		strh	r3, [r0, #20]	@ movhi
 515:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 516:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 748              		.loc 1 516 1 view .LVU226
 749 001a 7047     		bx	lr
 750              		.cfi_endproc
 751              	.LFE131:
 753              		.section	.text.USART_SendData,"ax",%progbits
 754              		.align	1
 755              		.global	USART_SendData
 756              		.syntax unified
 757              		.thumb
 758              		.thumb_func
 760              	USART_SendData:
 761              	.LVL83:
 762              	.LFB132:
 517:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 518:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 519:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 520:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 521:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 522:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group2 Data transfers functions
 523:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Data transfers functions 
 524:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 525:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 526:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 527:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                       ##### Data transfers functions #####
ARM GAS  /tmp/ccxSMOfF.s 			page 24


 528:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 529:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 530:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART data 
 531:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     transfers.
 532:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 533:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     During an USART reception, data shifts in least significant bit first through 
 534:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     the RX pin. In this mode, the USART_DR register consists of a buffer (RDR) 
 535:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     between the internal bus and the received shift register.
 536:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 537:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     When a transmission is taking place, a write instruction to the USART_DR register 
 538:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     stores the data in the TDR register and which is copied in the shift register 
 539:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     at the end of the current transmission.
 540:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 541:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     The read access of the USART_DR register can be done using the USART_ReceiveData()
 542:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     function and returns the RDR buffered value. Whereas a write access to the USART_DR 
 543:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     can be done using USART_SendData() function and stores the written data into 
 544:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     TDR buffer.
 545:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 546:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 547:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 548:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 549:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 550:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 551:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Transmits single data through the USARTx peripheral.
 552:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 553:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 554:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  Data: the data to transmit.
 555:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 556:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 557:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
 558:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 763              		.loc 1 558 1 is_stmt 1 view -0
 764              		.cfi_startproc
 765              		@ args = 0, pretend = 0, frame = 0
 766              		@ frame_needed = 0, uses_anonymous_args = 0
 767              		@ link register save eliminated.
 559:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 560:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 768              		.loc 1 560 3 view .LVU228
 561:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_DATA(Data)); 
 769              		.loc 1 561 3 view .LVU229
 562:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
 563:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Transmit Data */
 564:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->DR = (Data & (uint16_t)0x01FF);
 770              		.loc 1 564 3 view .LVU230
 771              		.loc 1 564 22 is_stmt 0 view .LVU231
 772 0000 C1F30801 		ubfx	r1, r1, #0, #9
 773              	.LVL84:
 774              		.loc 1 564 14 view .LVU232
 775 0004 8180     		strh	r1, [r0, #4]	@ movhi
 565:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 776              		.loc 1 565 1 view .LVU233
 777 0006 7047     		bx	lr
 778              		.cfi_endproc
 779              	.LFE132:
 781              		.section	.text.USART_ReceiveData,"ax",%progbits
 782              		.align	1
ARM GAS  /tmp/ccxSMOfF.s 			page 25


 783              		.global	USART_ReceiveData
 784              		.syntax unified
 785              		.thumb
 786              		.thumb_func
 788              	USART_ReceiveData:
 789              	.LVL85:
 790              	.LFB133:
 566:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 567:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 568:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Returns the most recent received data by the USARTx peripheral.
 569:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 570:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 571:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The received data.
 572:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 573:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
 574:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 791              		.loc 1 574 1 is_stmt 1 view -0
 792              		.cfi_startproc
 793              		@ args = 0, pretend = 0, frame = 0
 794              		@ frame_needed = 0, uses_anonymous_args = 0
 795              		@ link register save eliminated.
 575:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 576:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 796              		.loc 1 576 3 view .LVU235
 577:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 578:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Receive Data */
 579:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 797              		.loc 1 579 3 view .LVU236
 798              		.loc 1 579 27 is_stmt 0 view .LVU237
 799 0000 8088     		ldrh	r0, [r0, #4]
 800              	.LVL86:
 580:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 801              		.loc 1 580 1 view .LVU238
 802 0002 C0F30800 		ubfx	r0, r0, #0, #9
 803 0006 7047     		bx	lr
 804              		.cfi_endproc
 805              	.LFE133:
 807              		.section	.text.USART_SetAddress,"ax",%progbits
 808              		.align	1
 809              		.global	USART_SetAddress
 810              		.syntax unified
 811              		.thumb
 812              		.thumb_func
 814              	USART_SetAddress:
 815              	.LVL87:
 816              	.LFB134:
 581:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 582:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 583:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 584:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 585:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 586:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group3 MultiProcessor Communication functions
 587:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Multi-Processor Communication functions 
 588:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 589:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 590:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 591:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****               ##### Multi-Processor Communication functions #####
ARM GAS  /tmp/ccxSMOfF.s 			page 26


 592:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 593:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 594:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART 
 595:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     multiprocessor communication.
 596:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 597:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     For instance one of the USARTs can be the master, its TX output is connected 
 598:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     to the RX input of the other USART. The others are slaves, their respective 
 599:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     TX outputs are logically ANDed together and connected to the RX input of the 
 600:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     master.
 601:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 602:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USART multiprocessor communication is possible through the following procedure:
 603:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Program the Baud rate, Word length = 9 bits, Stop bits, Parity, Mode 
 604:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           transmitter or Mode receiver and hardware flow control values using 
 605:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           the USART_Init() function.
 606:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Configures the USART address using the USART_SetAddress() function.
 607:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Configures the wake up method (USART_WakeUp_IdleLine or USART_WakeUp_AddressMark)
 608:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           using USART_WakeUpConfig() function only for the slaves.
 609:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
 610:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enter the USART slaves in mute mode using USART_ReceiverWakeUpCmd() function.
 611:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 612:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     The USART Slave exit from mute mode when receive the wake up condition.
 613:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 614:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 615:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 616:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 617:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 618:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 619:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the address of the USART node.
 620:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 621:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 622:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_Address: Indicates the address of the USART node.
 623:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 624:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 625:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
 626:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 817              		.loc 1 626 1 is_stmt 1 view -0
 818              		.cfi_startproc
 819              		@ args = 0, pretend = 0, frame = 0
 820              		@ frame_needed = 0, uses_anonymous_args = 0
 821              		@ link register save eliminated.
 627:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 628:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 822              		.loc 1 628 3 view .LVU240
 629:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ADDRESS(USART_Address)); 
 823              		.loc 1 629 3 view .LVU241
 630:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
 631:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART address */
 632:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 824              		.loc 1 632 3 view .LVU242
 825              		.loc 1 632 15 is_stmt 0 view .LVU243
 826 0000 038A     		ldrh	r3, [r0, #16]
 827 0002 9BB2     		uxth	r3, r3
 828 0004 23F00F03 		bic	r3, r3, #15
 829 0008 9BB2     		uxth	r3, r3
 830 000a 0382     		strh	r3, [r0, #16]	@ movhi
 633:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART address node */
 634:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 |= USART_Address;
ARM GAS  /tmp/ccxSMOfF.s 			page 27


 831              		.loc 1 634 3 is_stmt 1 view .LVU244
 832              		.loc 1 634 15 is_stmt 0 view .LVU245
 833 000c 038A     		ldrh	r3, [r0, #16]
 834 000e 9BB2     		uxth	r3, r3
 835 0010 0B43     		orrs	r3, r3, r1
 836 0012 0382     		strh	r3, [r0, #16]	@ movhi
 635:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 837              		.loc 1 635 1 view .LVU246
 838 0014 7047     		bx	lr
 839              		.cfi_endproc
 840              	.LFE134:
 842              		.section	.text.USART_ReceiverWakeUpCmd,"ax",%progbits
 843              		.align	1
 844              		.global	USART_ReceiverWakeUpCmd
 845              		.syntax unified
 846              		.thumb
 847              		.thumb_func
 849              	USART_ReceiverWakeUpCmd:
 850              	.LVL88:
 851              	.LFB135:
 636:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 637:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 638:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Determines if the USART is in mute mode or not.
 639:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 640:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 641:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART mute mode.
 642:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 643:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 644:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 645:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 646:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 852              		.loc 1 646 1 is_stmt 1 view -0
 853              		.cfi_startproc
 854              		@ args = 0, pretend = 0, frame = 0
 855              		@ frame_needed = 0, uses_anonymous_args = 0
 856              		@ link register save eliminated.
 647:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 648:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 857              		.loc 1 648 3 view .LVU248
 649:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 858              		.loc 1 649 3 view .LVU249
 650:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 651:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 859              		.loc 1 651 3 view .LVU250
 860              		.loc 1 651 6 is_stmt 0 view .LVU251
 861 0000 29B1     		cbz	r1, .L52
 652:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 653:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
 654:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_RWU;
 862              		.loc 1 654 5 is_stmt 1 view .LVU252
 863              		.loc 1 654 17 is_stmt 0 view .LVU253
 864 0002 8389     		ldrh	r3, [r0, #12]
 865 0004 9BB2     		uxth	r3, r3
 866 0006 43F00203 		orr	r3, r3, #2
 867 000a 8381     		strh	r3, [r0, #12]	@ movhi
 868 000c 7047     		bx	lr
 869              	.L52:
ARM GAS  /tmp/ccxSMOfF.s 			page 28


 655:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 656:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 657:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 658:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
 659:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 870              		.loc 1 659 5 is_stmt 1 view .LVU254
 871              		.loc 1 659 17 is_stmt 0 view .LVU255
 872 000e 8389     		ldrh	r3, [r0, #12]
 873 0010 9BB2     		uxth	r3, r3
 874 0012 23F00203 		bic	r3, r3, #2
 875 0016 9BB2     		uxth	r3, r3
 876 0018 8381     		strh	r3, [r0, #12]	@ movhi
 660:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 661:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 877              		.loc 1 661 1 view .LVU256
 878 001a 7047     		bx	lr
 879              		.cfi_endproc
 880              	.LFE135:
 882              		.section	.text.USART_WakeUpConfig,"ax",%progbits
 883              		.align	1
 884              		.global	USART_WakeUpConfig
 885              		.syntax unified
 886              		.thumb
 887              		.thumb_func
 889              	USART_WakeUpConfig:
 890              	.LVL89:
 891              	.LFB136:
 662:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 663:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Selects the USART WakeUp method.
 664:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 665:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 666:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_WakeUp: specifies the USART wakeup method.
 667:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
 668:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
 669:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
 670:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 671:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 672:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
 673:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 892              		.loc 1 673 1 is_stmt 1 view -0
 893              		.cfi_startproc
 894              		@ args = 0, pretend = 0, frame = 0
 895              		@ frame_needed = 0, uses_anonymous_args = 0
 896              		@ link register save eliminated.
 674:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 675:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 897              		.loc 1 675 3 view .LVU258
 676:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_WAKEUP(USART_WakeUp));
 898              		.loc 1 676 3 view .LVU259
 677:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 678:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 899              		.loc 1 678 3 view .LVU260
 900              		.loc 1 678 15 is_stmt 0 view .LVU261
 901 0000 8389     		ldrh	r3, [r0, #12]
 902 0002 9BB2     		uxth	r3, r3
 903 0004 23F40063 		bic	r3, r3, #2048
 904 0008 9BB2     		uxth	r3, r3
ARM GAS  /tmp/ccxSMOfF.s 			page 29


 905 000a 8381     		strh	r3, [r0, #12]	@ movhi
 679:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 |= USART_WakeUp;
 906              		.loc 1 679 3 is_stmt 1 view .LVU262
 907              		.loc 1 679 15 is_stmt 0 view .LVU263
 908 000c 8389     		ldrh	r3, [r0, #12]
 909 000e 9BB2     		uxth	r3, r3
 910 0010 0B43     		orrs	r3, r3, r1
 911 0012 8381     		strh	r3, [r0, #12]	@ movhi
 680:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 912              		.loc 1 680 1 view .LVU264
 913 0014 7047     		bx	lr
 914              		.cfi_endproc
 915              	.LFE136:
 917              		.section	.text.USART_LINBreakDetectLengthConfig,"ax",%progbits
 918              		.align	1
 919              		.global	USART_LINBreakDetectLengthConfig
 920              		.syntax unified
 921              		.thumb
 922              		.thumb_func
 924              	USART_LINBreakDetectLengthConfig:
 925              	.LVL90:
 926              	.LFB137:
 681:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 682:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 683:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 684:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 685:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 686:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group4 LIN mode functions
 687:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   LIN mode functions 
 688:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 689:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 690:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 691:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                         ##### LIN mode functions #####
 692:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 693:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 694:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART LIN 
 695:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     Mode communication.
 696:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 697:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     In LIN mode, 8-bit data format with 1 stop bit is required in accordance with 
 698:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     the LIN standard.
 699:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 700:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     Only this LIN Feature is supported by the USART IP:
 701:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (+) LIN Master Synchronous Break send capability and LIN slave break detection
 702:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           capability :  13-bit break generation and 10/11 bit break detection
 703:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 704:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 705:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USART LIN Master transmitter communication is possible through the following 
 706:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     procedure:
 707:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 708:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         Mode transmitter or Mode receiver and hardware flow control values using 
 709:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         the USART_Init() function.
 710:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
 711:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable the LIN mode using the USART_LINCmd() function.
 712:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Send the break character using USART_SendBreak() function.
 713:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 714:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USART LIN Master receiver communication is possible through the following procedure:
 715:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
ARM GAS  /tmp/ccxSMOfF.s 			page 30


 716:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           Mode transmitter or Mode receiver and hardware flow control values using 
 717:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           the USART_Init() function.
 718:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
 719:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Configures the break detection length using the USART_LINBreakDetectLengthConfig()
 720:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           function.
 721:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable the LIN mode using the USART_LINCmd() function.
 722:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 723:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       -@- In LIN mode, the following bits must be kept cleared:
 724:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        (+@) CLKEN in the USART_CR2 register,
 725:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        (+@) STOP[1:0], SCEN, HDSEL and IREN in the USART_CR3 register.
 726:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 727:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 728:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 729:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 730:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 731:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 732:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the USART LIN Break detection length.
 733:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 734:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 735:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_LINBreakDetectLength: specifies the LIN break detection length.
 736:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
 737:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
 738:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
 739:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 740:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 741:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
 742:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 927              		.loc 1 742 1 is_stmt 1 view -0
 928              		.cfi_startproc
 929              		@ args = 0, pretend = 0, frame = 0
 930              		@ frame_needed = 0, uses_anonymous_args = 0
 931              		@ link register save eliminated.
 743:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 744:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 932              		.loc 1 744 3 view .LVU266
 745:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
 933              		.loc 1 745 3 view .LVU267
 746:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 747:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 934              		.loc 1 747 3 view .LVU268
 935              		.loc 1 747 15 is_stmt 0 view .LVU269
 936 0000 038A     		ldrh	r3, [r0, #16]
 937 0002 9BB2     		uxth	r3, r3
 938 0004 23F02003 		bic	r3, r3, #32
 939 0008 9BB2     		uxth	r3, r3
 940 000a 0382     		strh	r3, [r0, #16]	@ movhi
 748:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 |= USART_LINBreakDetectLength;  
 941              		.loc 1 748 3 is_stmt 1 view .LVU270
 942              		.loc 1 748 15 is_stmt 0 view .LVU271
 943 000c 038A     		ldrh	r3, [r0, #16]
 944 000e 9BB2     		uxth	r3, r3
 945 0010 0B43     		orrs	r3, r3, r1
 946 0012 0382     		strh	r3, [r0, #16]	@ movhi
 749:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 947              		.loc 1 749 1 view .LVU272
 948 0014 7047     		bx	lr
 949              		.cfi_endproc
ARM GAS  /tmp/ccxSMOfF.s 			page 31


 950              	.LFE137:
 952              		.section	.text.USART_LINCmd,"ax",%progbits
 953              		.align	1
 954              		.global	USART_LINCmd
 955              		.syntax unified
 956              		.thumb
 957              		.thumb_func
 959              	USART_LINCmd:
 960              	.LVL91:
 961              	.LFB138:
 750:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 751:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 752:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's LIN mode.
 753:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 754:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 755:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART LIN mode.
 756:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 757:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 758:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 759:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 760:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 962              		.loc 1 760 1 is_stmt 1 view -0
 963              		.cfi_startproc
 964              		@ args = 0, pretend = 0, frame = 0
 965              		@ frame_needed = 0, uses_anonymous_args = 0
 966              		@ link register save eliminated.
 761:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 762:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 967              		.loc 1 762 3 view .LVU274
 763:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 968              		.loc 1 763 3 view .LVU275
 764:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 765:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 969              		.loc 1 765 3 view .LVU276
 970              		.loc 1 765 6 is_stmt 0 view .LVU277
 971 0000 29B1     		cbz	r1, .L57
 766:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 767:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 768:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR2 |= USART_CR2_LINEN;
 972              		.loc 1 768 5 is_stmt 1 view .LVU278
 973              		.loc 1 768 17 is_stmt 0 view .LVU279
 974 0002 038A     		ldrh	r3, [r0, #16]
 975 0004 9BB2     		uxth	r3, r3
 976 0006 43F48043 		orr	r3, r3, #16384
 977 000a 0382     		strh	r3, [r0, #16]	@ movhi
 978 000c 7047     		bx	lr
 979              	.L57:
 769:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 770:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 771:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 772:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
 773:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 980              		.loc 1 773 5 is_stmt 1 view .LVU280
 981              		.loc 1 773 17 is_stmt 0 view .LVU281
 982 000e 038A     		ldrh	r3, [r0, #16]
 983 0010 9BB2     		uxth	r3, r3
 984 0012 23F48043 		bic	r3, r3, #16384
ARM GAS  /tmp/ccxSMOfF.s 			page 32


 985 0016 9BB2     		uxth	r3, r3
 986 0018 0382     		strh	r3, [r0, #16]	@ movhi
 774:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 775:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 987              		.loc 1 775 1 view .LVU282
 988 001a 7047     		bx	lr
 989              		.cfi_endproc
 990              	.LFE138:
 992              		.section	.text.USART_SendBreak,"ax",%progbits
 993              		.align	1
 994              		.global	USART_SendBreak
 995              		.syntax unified
 996              		.thumb
 997              		.thumb_func
 999              	USART_SendBreak:
 1000              	.LVL92:
 1001              	.LFB139:
 776:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 777:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 778:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Transmits break characters.
 779:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 780:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 781:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 782:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 783:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SendBreak(USART_TypeDef* USARTx)
 784:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1002              		.loc 1 784 1 is_stmt 1 view -0
 1003              		.cfi_startproc
 1004              		@ args = 0, pretend = 0, frame = 0
 1005              		@ frame_needed = 0, uses_anonymous_args = 0
 1006              		@ link register save eliminated.
 785:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 786:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1007              		.loc 1 786 3 view .LVU284
 787:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 788:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Send break characters */
 789:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 |= USART_CR1_SBK;
 1008              		.loc 1 789 3 view .LVU285
 1009              		.loc 1 789 15 is_stmt 0 view .LVU286
 1010 0000 8389     		ldrh	r3, [r0, #12]
 1011 0002 9BB2     		uxth	r3, r3
 1012 0004 43F00103 		orr	r3, r3, #1
 1013 0008 8381     		strh	r3, [r0, #12]	@ movhi
 790:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1014              		.loc 1 790 1 view .LVU287
 1015 000a 7047     		bx	lr
 1016              		.cfi_endproc
 1017              	.LFE139:
 1019              		.section	.text.USART_HalfDuplexCmd,"ax",%progbits
 1020              		.align	1
 1021              		.global	USART_HalfDuplexCmd
 1022              		.syntax unified
 1023              		.thumb
 1024              		.thumb_func
 1026              	USART_HalfDuplexCmd:
 1027              	.LVL93:
 1028              	.LFB140:
ARM GAS  /tmp/ccxSMOfF.s 			page 33


 791:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 792:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 793:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 794:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 795:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 796:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group5 Halfduplex mode function
 797:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Half-duplex mode function 
 798:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 799:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 800:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 801:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                     ##### Half-duplex mode function #####
 802:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 803:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 804:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART 
 805:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     Half-duplex communication.
 806:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 807:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     The USART can be configured to follow a single-wire half-duplex protocol where 
 808:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     the TX and RX lines are internally connected.
 809:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 810:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USART Half duplex communication is possible through the following procedure:
 811:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Program the Baud rate, Word length, Stop bits, Parity, Mode transmitter 
 812:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           or Mode receiver and hardware flow control values using the USART_Init()
 813:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           function.
 814:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Configures the USART address using the USART_SetAddress() function.
 815:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
 816:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable the half duplex mode using USART_HalfDuplexCmd() function.
 817:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 818:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 819:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     -@- The RX pin is no longer used
 820:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     -@- In Half-duplex mode the following bits must be kept cleared:
 821:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (+@) LINEN and CLKEN bits in the USART_CR2 register.
 822:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (+@) SCEN and IREN bits in the USART_CR3 register.
 823:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 824:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 825:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 826:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 827:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 828:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 829:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's Half Duplex communication.
 830:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 831:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 832:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART Communication.
 833:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 834:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 835:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 836:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 837:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1029              		.loc 1 837 1 is_stmt 1 view -0
 1030              		.cfi_startproc
 1031              		@ args = 0, pretend = 0, frame = 0
 1032              		@ frame_needed = 0, uses_anonymous_args = 0
 1033              		@ link register save eliminated.
 838:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 839:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1034              		.loc 1 839 3 view .LVU289
 840:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1035              		.loc 1 840 3 view .LVU290
ARM GAS  /tmp/ccxSMOfF.s 			page 34


 841:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 842:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1036              		.loc 1 842 3 view .LVU291
 1037              		.loc 1 842 6 is_stmt 0 view .LVU292
 1038 0000 29B1     		cbz	r1, .L61
 843:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 844:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 845:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_HDSEL;
 1039              		.loc 1 845 5 is_stmt 1 view .LVU293
 1040              		.loc 1 845 17 is_stmt 0 view .LVU294
 1041 0002 838A     		ldrh	r3, [r0, #20]
 1042 0004 9BB2     		uxth	r3, r3
 1043 0006 43F00803 		orr	r3, r3, #8
 1044 000a 8382     		strh	r3, [r0, #20]	@ movhi
 1045 000c 7047     		bx	lr
 1046              	.L61:
 846:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 847:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 848:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 849:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
 850:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 1047              		.loc 1 850 5 is_stmt 1 view .LVU295
 1048              		.loc 1 850 17 is_stmt 0 view .LVU296
 1049 000e 838A     		ldrh	r3, [r0, #20]
 1050 0010 9BB2     		uxth	r3, r3
 1051 0012 23F00803 		bic	r3, r3, #8
 1052 0016 9BB2     		uxth	r3, r3
 1053 0018 8382     		strh	r3, [r0, #20]	@ movhi
 851:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 852:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1054              		.loc 1 852 1 view .LVU297
 1055 001a 7047     		bx	lr
 1056              		.cfi_endproc
 1057              	.LFE140:
 1059              		.section	.text.USART_SetGuardTime,"ax",%progbits
 1060              		.align	1
 1061              		.global	USART_SetGuardTime
 1062              		.syntax unified
 1063              		.thumb
 1064              		.thumb_func
 1066              	USART_SetGuardTime:
 1067              	.LVL94:
 1068              	.LFB141:
 853:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 854:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 855:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 856:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 857:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 858:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 859:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group6 Smartcard mode functions
 860:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Smartcard mode functions 
 861:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 862:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 863:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 864:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                               ##### Smartcard mode functions #####
 865:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 866:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
ARM GAS  /tmp/ccxSMOfF.s 			page 35


 867:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART 
 868:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     Smartcard communication.
 869:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 870:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     The Smartcard interface is designed to support asynchronous protocol Smartcards as
 871:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     defined in the ISO 7816-3 standard.
 872:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 873:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     The USART can provide a clock to the smartcard through the SCLK output.
 874:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     In smartcard mode, SCLK is not associated to the communication but is simply derived 
 875:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     from the internal peripheral input clock through a 5-bit prescaler.
 876:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 877:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     Smartcard communication is possible through the following procedure:
 878:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Configures the Smartcard Prescaler using the USART_SetPrescaler() function.
 879:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Configures the Smartcard Guard Time using the USART_SetGuardTime() function.
 880:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Program the USART clock using the USART_ClockInit() function as following:
 881:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) USART Clock enabled
 882:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) USART CPOL Low
 883:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) USART CPHA on first edge
 884:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) USART Last Bit Clock Enabled
 885:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Program the Smartcard interface using the USART_Init() function as following:
 886:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Word Length = 9 Bits
 887:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) 1.5 Stop Bit
 888:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Even parity
 889:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) BaudRate = 12096 baud
 890:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Hardware flow control disabled (RTS and CTS signals)
 891:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Tx and Rx enabled
 892:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) POptionally you can enable the parity error interrupt using the USART_ITConfig()
 893:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           function
 894:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) PEnable the USART using the USART_Cmd() function.
 895:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) PEnable the Smartcard NACK using the USART_SmartCardNACKCmd() function.
 896:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) PEnable the Smartcard interface using the USART_SmartCardCmd() function.
 897:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 898:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     Please refer to the ISO 7816-3 specification for more details.
 899:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 900:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       -@- It is also possible to choose 0.5 stop bit for receiving but it is recommended 
 901:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           to use 1.5 stop bits for both transmitting and receiving to avoid switching 
 902:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           between the two configurations.
 903:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       -@- In smartcard mode, the following bits must be kept cleared:
 904:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (+@) LINEN bit in the USART_CR2 register.
 905:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (+@) HDSEL and IREN bits in the USART_CR3 register.
 906:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       -@- Smartcard mode is available on USART peripherals only (not available on UART4 
 907:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           and UART5 peripherals).
 908:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 909:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 910:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 911:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 912:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 913:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 914:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the specified USART guard time.
 915:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 916:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 917:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_GuardTime: specifies the guard time.   
 918:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 919:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 920:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
 921:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {    
 1069              		.loc 1 921 1 is_stmt 1 view -0
 1070              		.cfi_startproc
ARM GAS  /tmp/ccxSMOfF.s 			page 36


 1071              		@ args = 0, pretend = 0, frame = 0
 1072              		@ frame_needed = 0, uses_anonymous_args = 0
 1073              		@ link register save eliminated.
 922:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 923:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 1074              		.loc 1 923 3 view .LVU299
 924:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 925:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART Guard time */
 926:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR &= USART_GTPR_PSC;
 1075              		.loc 1 926 3 view .LVU300
 1076              		.loc 1 926 16 is_stmt 0 view .LVU301
 1077 0000 028B     		ldrh	r2, [r0, #24]
 1078 0002 D2B2     		uxtb	r2, r2
 1079 0004 0283     		strh	r2, [r0, #24]	@ movhi
 927:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART guard time */
 928:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 1080              		.loc 1 928 3 is_stmt 1 view .LVU302
 1081              		.loc 1 928 16 is_stmt 0 view .LVU303
 1082 0006 038B     		ldrh	r3, [r0, #24]
 1083 0008 9BB2     		uxth	r3, r3
 1084 000a 43EA0123 		orr	r3, r3, r1, lsl #8
 1085 000e 0383     		strh	r3, [r0, #24]	@ movhi
 929:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1086              		.loc 1 929 1 view .LVU304
 1087 0010 7047     		bx	lr
 1088              		.cfi_endproc
 1089              	.LFE141:
 1091              		.section	.text.USART_SmartCardCmd,"ax",%progbits
 1092              		.align	1
 1093              		.global	USART_SmartCardCmd
 1094              		.syntax unified
 1095              		.thumb
 1096              		.thumb_func
 1098              	USART_SmartCardCmd:
 1099              	.LVL95:
 1100              	.LFB142:
 930:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 931:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 932:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's Smart Card mode.
 933:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 934:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 935:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the Smart Card mode.
 936:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.      
 937:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 938:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 939:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 940:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1101              		.loc 1 940 1 is_stmt 1 view -0
 1102              		.cfi_startproc
 1103              		@ args = 0, pretend = 0, frame = 0
 1104              		@ frame_needed = 0, uses_anonymous_args = 0
 1105              		@ link register save eliminated.
 941:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 942:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 1106              		.loc 1 942 3 view .LVU306
 943:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1107              		.loc 1 943 3 view .LVU307
ARM GAS  /tmp/ccxSMOfF.s 			page 37


 944:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1108              		.loc 1 944 3 view .LVU308
 1109              		.loc 1 944 6 is_stmt 0 view .LVU309
 1110 0000 29B1     		cbz	r1, .L65
 945:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 946:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the SC mode by setting the SCEN bit in the CR3 register */
 947:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_SCEN;
 1111              		.loc 1 947 5 is_stmt 1 view .LVU310
 1112              		.loc 1 947 17 is_stmt 0 view .LVU311
 1113 0002 838A     		ldrh	r3, [r0, #20]
 1114 0004 9BB2     		uxth	r3, r3
 1115 0006 43F02003 		orr	r3, r3, #32
 1116 000a 8382     		strh	r3, [r0, #20]	@ movhi
 1117 000c 7047     		bx	lr
 1118              	.L65:
 948:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 949:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 950:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 951:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
 952:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 1119              		.loc 1 952 5 is_stmt 1 view .LVU312
 1120              		.loc 1 952 17 is_stmt 0 view .LVU313
 1121 000e 838A     		ldrh	r3, [r0, #20]
 1122 0010 9BB2     		uxth	r3, r3
 1123 0012 23F02003 		bic	r3, r3, #32
 1124 0016 9BB2     		uxth	r3, r3
 1125 0018 8382     		strh	r3, [r0, #20]	@ movhi
 953:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 954:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1126              		.loc 1 954 1 view .LVU314
 1127 001a 7047     		bx	lr
 1128              		.cfi_endproc
 1129              	.LFE142:
 1131              		.section	.text.USART_SmartCardNACKCmd,"ax",%progbits
 1132              		.align	1
 1133              		.global	USART_SmartCardNACKCmd
 1134              		.syntax unified
 1135              		.thumb
 1136              		.thumb_func
 1138              	USART_SmartCardNACKCmd:
 1139              	.LVL96:
 1140              	.LFB143:
 955:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 956:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 957:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables NACK transmission.
 958:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 959:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 960:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the NACK transmission.
 961:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.  
 962:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 963:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 964:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 965:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1141              		.loc 1 965 1 is_stmt 1 view -0
 1142              		.cfi_startproc
 1143              		@ args = 0, pretend = 0, frame = 0
 1144              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccxSMOfF.s 			page 38


 1145              		@ link register save eliminated.
 966:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 967:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx)); 
 1146              		.loc 1 967 3 view .LVU316
 968:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1147              		.loc 1 968 3 view .LVU317
 969:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1148              		.loc 1 969 3 view .LVU318
 1149              		.loc 1 969 6 is_stmt 0 view .LVU319
 1150 0000 29B1     		cbz	r1, .L68
 970:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 971:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
 972:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_NACK;
 1151              		.loc 1 972 5 is_stmt 1 view .LVU320
 1152              		.loc 1 972 17 is_stmt 0 view .LVU321
 1153 0002 838A     		ldrh	r3, [r0, #20]
 1154 0004 9BB2     		uxth	r3, r3
 1155 0006 43F01003 		orr	r3, r3, #16
 1156 000a 8382     		strh	r3, [r0, #20]	@ movhi
 1157 000c 7047     		bx	lr
 1158              	.L68:
 973:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 974:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 975:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 976:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
 977:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 1159              		.loc 1 977 5 is_stmt 1 view .LVU322
 1160              		.loc 1 977 17 is_stmt 0 view .LVU323
 1161 000e 838A     		ldrh	r3, [r0, #20]
 1162 0010 9BB2     		uxth	r3, r3
 1163 0012 23F01003 		bic	r3, r3, #16
 1164 0016 9BB2     		uxth	r3, r3
 1165 0018 8382     		strh	r3, [r0, #20]	@ movhi
 978:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 979:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1166              		.loc 1 979 1 view .LVU324
 1167 001a 7047     		bx	lr
 1168              		.cfi_endproc
 1169              	.LFE143:
 1171              		.section	.text.USART_IrDAConfig,"ax",%progbits
 1172              		.align	1
 1173              		.global	USART_IrDAConfig
 1174              		.syntax unified
 1175              		.thumb
 1176              		.thumb_func
 1178              	USART_IrDAConfig:
 1179              	.LVL97:
 1180              	.LFB144:
 980:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 981:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 982:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 983:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 984:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 985:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group7 IrDA mode functions
 986:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   IrDA mode functions 
 987:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 988:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
ARM GAS  /tmp/ccxSMOfF.s 			page 39


 989:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 990:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                         ##### IrDA mode functions #####
 991:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 992:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 993:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART 
 994:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     IrDA communication.
 995:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 996:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     IrDA is a half duplex communication protocol. If the Transmitter is busy, any data
 997:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     on the IrDA receive line will be ignored by the IrDA decoder and if the Receiver 
 998:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     is busy, data on the TX from the USART to IrDA will not be encoded by IrDA.
 999:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     While receiving data, transmission should be avoided as the data to be transmitted
1000:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     could be corrupted.
1001:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
1002:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     IrDA communication is possible through the following procedure:
1003:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Program the Baud rate, Word length = 8 bits, Stop bits, Parity, Transmitter/Receiver 
1004:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           modes and hardware flow control values using the USART_Init() function.
1005:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
1006:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Configures the IrDA pulse width by configuring the prescaler using  
1007:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           the USART_SetPrescaler() function.
1008:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Configures the IrDA  USART_IrDAMode_LowPower or USART_IrDAMode_Normal mode
1009:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           using the USART_IrDAConfig() function.
1010:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable the IrDA using the USART_IrDACmd() function.
1011:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1012:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       -@- A pulse of width less than two and greater than one PSC period(s) may or may
1013:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           not be rejected.
1014:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       -@- The receiver set up time should be managed by software. The IrDA physical layer
1015:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           specification specifies a minimum of 10 ms delay between transmission and 
1016:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           reception (IrDA is a half duplex protocol).
1017:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       -@- In IrDA mode, the following bits must be kept cleared:
1018:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (+@) LINEN, STOP and CLKEN bits in the USART_CR2 register.
1019:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (+@) SCEN and HDSEL bits in the USART_CR3 register.
1020:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1021:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1022:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1023:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1024:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1025:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1026:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Configures the USART's IrDA interface.
1027:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1028:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1029:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IrDAMode: specifies the IrDA mode.
1030:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1031:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IrDAMode_LowPower
1032:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IrDAMode_Normal
1033:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1034:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1035:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
1036:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1181              		.loc 1 1036 1 is_stmt 1 view -0
 1182              		.cfi_startproc
 1183              		@ args = 0, pretend = 0, frame = 0
 1184              		@ frame_needed = 0, uses_anonymous_args = 0
 1185              		@ link register save eliminated.
1037:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1038:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1186              		.loc 1 1038 3 view .LVU326
1039:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
ARM GAS  /tmp/ccxSMOfF.s 			page 40


 1187              		.loc 1 1039 3 view .LVU327
1040:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1041:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 1188              		.loc 1 1041 3 view .LVU328
 1189              		.loc 1 1041 15 is_stmt 0 view .LVU329
 1190 0000 838A     		ldrh	r3, [r0, #20]
 1191 0002 9BB2     		uxth	r3, r3
 1192 0004 23F00403 		bic	r3, r3, #4
 1193 0008 9BB2     		uxth	r3, r3
 1194 000a 8382     		strh	r3, [r0, #20]	@ movhi
1042:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 |= USART_IrDAMode;
 1195              		.loc 1 1042 3 is_stmt 1 view .LVU330
 1196              		.loc 1 1042 15 is_stmt 0 view .LVU331
 1197 000c 838A     		ldrh	r3, [r0, #20]
 1198 000e 9BB2     		uxth	r3, r3
 1199 0010 0B43     		orrs	r3, r3, r1
 1200 0012 8382     		strh	r3, [r0, #20]	@ movhi
1043:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1201              		.loc 1 1043 1 view .LVU332
 1202 0014 7047     		bx	lr
 1203              		.cfi_endproc
 1204              	.LFE144:
 1206              		.section	.text.USART_IrDACmd,"ax",%progbits
 1207              		.align	1
 1208              		.global	USART_IrDACmd
 1209              		.syntax unified
 1210              		.thumb
 1211              		.thumb_func
 1213              	USART_IrDACmd:
 1214              	.LVL98:
 1215              	.LFB145:
1044:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1045:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1046:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's IrDA interface.
1047:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1048:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1049:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the IrDA mode.
1050:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1051:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1052:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1053:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
1054:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1216              		.loc 1 1054 1 is_stmt 1 view -0
 1217              		.cfi_startproc
 1218              		@ args = 0, pretend = 0, frame = 0
 1219              		@ frame_needed = 0, uses_anonymous_args = 0
 1220              		@ link register save eliminated.
1055:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1056:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1221              		.loc 1 1056 3 view .LVU334
1057:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1222              		.loc 1 1057 3 view .LVU335
1058:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1059:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1223              		.loc 1 1059 3 view .LVU336
 1224              		.loc 1 1059 6 is_stmt 0 view .LVU337
 1225 0000 29B1     		cbz	r1, .L72
ARM GAS  /tmp/ccxSMOfF.s 			page 41


1060:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1061:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
1062:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_IREN;
 1226              		.loc 1 1062 5 is_stmt 1 view .LVU338
 1227              		.loc 1 1062 17 is_stmt 0 view .LVU339
 1228 0002 838A     		ldrh	r3, [r0, #20]
 1229 0004 9BB2     		uxth	r3, r3
 1230 0006 43F00203 		orr	r3, r3, #2
 1231 000a 8382     		strh	r3, [r0, #20]	@ movhi
 1232 000c 7047     		bx	lr
 1233              	.L72:
1063:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1064:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1065:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1066:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
1067:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 1234              		.loc 1 1067 5 is_stmt 1 view .LVU340
 1235              		.loc 1 1067 17 is_stmt 0 view .LVU341
 1236 000e 838A     		ldrh	r3, [r0, #20]
 1237 0010 9BB2     		uxth	r3, r3
 1238 0012 23F00203 		bic	r3, r3, #2
 1239 0016 9BB2     		uxth	r3, r3
 1240 0018 8382     		strh	r3, [r0, #20]	@ movhi
1068:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1069:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1241              		.loc 1 1069 1 view .LVU342
 1242 001a 7047     		bx	lr
 1243              		.cfi_endproc
 1244              	.LFE145:
 1246              		.section	.text.USART_DMACmd,"ax",%progbits
 1247              		.align	1
 1248              		.global	USART_DMACmd
 1249              		.syntax unified
 1250              		.thumb
 1251              		.thumb_func
 1253              	USART_DMACmd:
 1254              	.LVL99:
 1255              	.LFB146:
1070:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1071:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1072:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
1073:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1074:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1075:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group8 DMA transfers management functions
1076:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   DMA transfers management functions
1077:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
1078:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
1079:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
1080:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****               ##### DMA transfers management functions #####
1081:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
1082:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1083:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1084:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1085:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1086:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1087:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1088:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's DMA interface.
ARM GAS  /tmp/ccxSMOfF.s 			page 42


1089:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1090:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1091:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_DMAReq: specifies the DMA request.
1092:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be any combination of the following values:
1093:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_DMAReq_Tx: USART DMA transmit request
1094:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_DMAReq_Rx: USART DMA receive request
1095:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the DMA Request sources.
1096:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.   
1097:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1098:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1099:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
1100:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1256              		.loc 1 1100 1 is_stmt 1 view -0
 1257              		.cfi_startproc
 1258              		@ args = 0, pretend = 0, frame = 0
 1259              		@ frame_needed = 0, uses_anonymous_args = 0
 1260              		@ link register save eliminated.
1101:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1102:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1261              		.loc 1 1102 3 view .LVU344
1103:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_DMAREQ(USART_DMAReq));  
 1262              		.loc 1 1103 3 view .LVU345
1104:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 1263              		.loc 1 1104 3 view .LVU346
1105:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1106:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1264              		.loc 1 1106 3 view .LVU347
 1265              		.loc 1 1106 6 is_stmt 0 view .LVU348
 1266 0000 22B1     		cbz	r2, .L75
1107:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1108:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the DMA transfer for selected requests by setting the DMAT and/or
1109:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        DMAR bits in the USART CR3 register */
1110:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_DMAReq;
 1267              		.loc 1 1110 5 is_stmt 1 view .LVU349
 1268              		.loc 1 1110 17 is_stmt 0 view .LVU350
 1269 0002 838A     		ldrh	r3, [r0, #20]
 1270 0004 9BB2     		uxth	r3, r3
 1271 0006 1943     		orrs	r1, r1, r3
 1272              	.LVL100:
 1273              		.loc 1 1110 17 view .LVU351
 1274 0008 8182     		strh	r1, [r0, #20]	@ movhi
 1275 000a 7047     		bx	lr
 1276              	.LVL101:
 1277              	.L75:
1111:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1112:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1113:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1114:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
1115:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        DMAR bits in the USART CR3 register */
1116:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 1278              		.loc 1 1116 5 is_stmt 1 view .LVU352
 1279              		.loc 1 1116 17 is_stmt 0 view .LVU353
 1280 000c 838A     		ldrh	r3, [r0, #20]
 1281              		.loc 1 1116 20 view .LVU354
 1282 000e C943     		mvns	r1, r1
 1283              	.LVL102:
 1284              		.loc 1 1116 20 view .LVU355
ARM GAS  /tmp/ccxSMOfF.s 			page 43


 1285 0010 89B2     		uxth	r1, r1
 1286              		.loc 1 1116 17 view .LVU356
 1287 0012 1940     		ands	r1, r1, r3
 1288 0014 8182     		strh	r1, [r0, #20]	@ movhi
1117:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1118:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1289              		.loc 1 1118 1 view .LVU357
 1290 0016 7047     		bx	lr
 1291              		.cfi_endproc
 1292              	.LFE146:
 1294              		.section	.text.USART_ITConfig,"ax",%progbits
 1295              		.align	1
 1296              		.global	USART_ITConfig
 1297              		.syntax unified
 1298              		.thumb
 1299              		.thumb_func
 1301              	USART_ITConfig:
 1302              	.LVL103:
 1303              	.LFB147:
1119:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1120:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1121:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
1122:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1123:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1124:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group9 Interrupts and flags management functions
1125:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Interrupts and flags management functions 
1126:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
1127:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
1128:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
1129:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             ##### Interrupts and flags management functions #####
1130:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
1131:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
1132:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to configure the USART 
1133:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     Interrupts sources, DMA channels requests and check or clear the flags or 
1134:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     pending bits status.
1135:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     The user should identify which mode will be used in his application to manage 
1136:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     the communication: Polling mode, Interrupt mode or DMA mode. 
1137:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1138:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *** Polling Mode ***
1139:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     ====================
1140:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
1141:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     In Polling Mode, the SPI communication can be managed by 10 flags:
1142:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) USART_FLAG_TXE : to indicate the status of the transmit buffer register
1143:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) USART_FLAG_RXNE : to indicate the status of the receive buffer register
1144:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) USART_FLAG_TC : to indicate the status of the transmit operation
1145:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) USART_FLAG_IDLE : to indicate the status of the Idle Line             
1146:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) USART_FLAG_CTS : to indicate the status of the nCTS input
1147:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) USART_FLAG_LBD : to indicate the status of the LIN break detection
1148:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) USART_FLAG_NE : to indicate if a noise error occur
1149:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) USART_FLAG_FE : to indicate if a frame error occur
1150:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) USART_FLAG_PE : to indicate if a parity error occur
1151:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) USART_FLAG_ORE : to indicate if an Overrun error occur
1152:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
1153:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     In this Mode it is advised to use the following functions:
1154:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (+) FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1155:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (+) void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1156:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
ARM GAS  /tmp/ccxSMOfF.s 			page 44


1157:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *** Interrupt Mode ***
1158:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     ======================
1159:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
1160:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     In Interrupt Mode, the USART communication can be managed by 8 interrupt sources
1161:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     and 10 pending bits: 
1162:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1163:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Pending Bits:
1164:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1165:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_TXE : to indicate the status of the transmit buffer register
1166:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_RXNE : to indicate the status of the receive buffer register
1167:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_TC : to indicate the status of the transmit operation
1168:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_IDLE : to indicate the status of the Idle Line             
1169:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_CTS : to indicate the status of the nCTS input
1170:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_LBD : to indicate the status of the LIN break detection
1171:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_NE : to indicate if a noise error occur
1172:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_FE : to indicate if a frame error occur
1173:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_PE : to indicate if a parity error occur
1174:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_ORE : to indicate if an Overrun error occur
1175:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1176:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Interrupt Source:
1177:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1178:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_TXE : specifies the interrupt source for the Tx buffer empty 
1179:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                             interrupt. 
1180:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1181:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                              empty interrupt.
1182:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_TC : specifies the interrupt source for the Transmit complete 
1183:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                            interrupt. 
1184:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_IDLE : specifies the interrupt source for the Idle Line interrupt.           
1185:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_CTS : specifies the interrupt source for the CTS interrupt. 
1186:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_LBD : specifies the interrupt source for the LIN break detection
1187:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                             interrupt. 
1188:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_PE : specifies the interrupt source for the parity error interrupt. 
1189:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_ERR :  specifies the interrupt source for the errors interrupt.
1190:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1191:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       -@@- Some parameters are coded in order to use them as interrupt source 
1192:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           or as pending bits.
1193:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
1194:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     In this Mode it is advised to use the following functions:
1195:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (+) void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState);
1196:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (+) ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT);
1197:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (+) void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT);
1198:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1199:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *** DMA Mode ***
1200:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     ================
1201:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
1202:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     In DMA Mode, the USART communication can be managed by 2 DMA Channel requests:
1203:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) USART_DMAReq_Tx: specifies the Tx buffer DMA transfer request
1204:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) USART_DMAReq_Rx: specifies the Rx buffer DMA transfer request
1205:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
1206:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     In this Mode it is advised to use the following function:
1207:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (+) void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
1208:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1209:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1210:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1211:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1212:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1213:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
ARM GAS  /tmp/ccxSMOfF.s 			page 45


1214:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the specified USART interrupts.
1215:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1216:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1217:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt sources to be enabled or disabled.
1218:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1219:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt
1220:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1221:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1222:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1223:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1224:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1225:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1226:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ERR:  Error interrupt(Frame error, noise error, overrun error)
1227:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the specified USARTx interrupts.
1228:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1229:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1230:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1231:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
1232:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1304              		.loc 1 1232 1 is_stmt 1 view -0
 1305              		.cfi_startproc
 1306              		@ args = 0, pretend = 0, frame = 0
 1307              		@ frame_needed = 0, uses_anonymous_args = 0
 1308              		@ link register save eliminated.
1233:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 1309              		.loc 1 1233 3 view .LVU359
1234:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t usartxbase = 0x00;
 1310              		.loc 1 1234 3 view .LVU360
1235:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1236:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1311              		.loc 1 1236 3 view .LVU361
1237:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CONFIG_IT(USART_IT));
 1312              		.loc 1 1237 3 view .LVU362
1238:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1313              		.loc 1 1238 3 view .LVU363
1239:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1240:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1241:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
 1314              		.loc 1 1241 3 view .LVU364
1242:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1243:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
 1315              		.loc 1 1243 5 view .LVU365
1244:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1245:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1246:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartxbase = (uint32_t)USARTx;
 1316              		.loc 1 1246 3 view .LVU366
1247:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1248:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the USART register index */
1249:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 1317              		.loc 1 1249 3 view .LVU367
 1318              		.loc 1 1249 35 is_stmt 0 view .LVU368
 1319 0000 C1F3421C 		ubfx	ip, r1, #5, #3
 1320              	.LVL104:
1250:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1251:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the interrupt position */
1252:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itpos = USART_IT & IT_MASK;
 1321              		.loc 1 1252 3 is_stmt 1 view .LVU369
ARM GAS  /tmp/ccxSMOfF.s 			page 46


 1322              		.loc 1 1252 9 is_stmt 0 view .LVU370
 1323 0004 01F01F01 		and	r1, r1, #31
 1324              	.LVL105:
1253:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = (((uint32_t)0x01) << itpos);
 1325              		.loc 1 1253 3 is_stmt 1 view .LVU371
 1326              		.loc 1 1253 10 is_stmt 0 view .LVU372
 1327 0008 0123     		movs	r3, #1
 1328 000a 03FA01F1 		lsl	r1, r3, r1
 1329              	.LVL106:
1254:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1255:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (usartreg == 0x01) /* The IT is in CR1 register */
 1330              		.loc 1 1255 3 is_stmt 1 view .LVU373
 1331              		.loc 1 1255 6 is_stmt 0 view .LVU374
 1332 000e 9C45     		cmp	ip, r3
 1333 0010 08D0     		beq	.L83
1256:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1257:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x0C;
1258:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1259:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (usartreg == 0x02) /* The IT is in CR2 register */
 1334              		.loc 1 1259 8 is_stmt 1 view .LVU375
 1335              		.loc 1 1259 11 is_stmt 0 view .LVU376
 1336 0012 BCF1020F 		cmp	ip, #2
 1337 0016 07D0     		beq	.L84
1260:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1261:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x10;
1262:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1263:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* The IT is in CR3 register */
1264:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1265:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x14; 
 1338              		.loc 1 1265 5 is_stmt 1 view .LVU377
 1339              		.loc 1 1265 16 is_stmt 0 view .LVU378
 1340 0018 1430     		adds	r0, r0, #20
 1341              	.LVL107:
 1342              	.L79:
1266:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1267:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1343              		.loc 1 1267 3 is_stmt 1 view .LVU379
 1344              		.loc 1 1267 6 is_stmt 0 view .LVU380
 1345 001a 3AB1     		cbz	r2, .L81
1268:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1269:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase  |= itmask;
 1346              		.loc 1 1269 5 is_stmt 1 view .LVU381
 1347              		.loc 1 1269 34 is_stmt 0 view .LVU382
 1348 001c 0368     		ldr	r3, [r0]
 1349 001e 1943     		orrs	r1, r1, r3
 1350              	.LVL108:
 1351              		.loc 1 1269 34 view .LVU383
 1352 0020 0160     		str	r1, [r0]
 1353 0022 7047     		bx	lr
 1354              	.LVL109:
 1355              	.L83:
1257:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 1356              		.loc 1 1257 5 is_stmt 1 view .LVU384
1257:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 1357              		.loc 1 1257 16 is_stmt 0 view .LVU385
 1358 0024 0C30     		adds	r0, r0, #12
 1359              	.LVL110:
ARM GAS  /tmp/ccxSMOfF.s 			page 47


1257:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 1360              		.loc 1 1257 16 view .LVU386
 1361 0026 F8E7     		b	.L79
 1362              	.LVL111:
 1363              	.L84:
1261:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 1364              		.loc 1 1261 5 is_stmt 1 view .LVU387
1261:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 1365              		.loc 1 1261 16 is_stmt 0 view .LVU388
 1366 0028 1030     		adds	r0, r0, #16
 1367              	.LVL112:
1261:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 1368              		.loc 1 1261 16 view .LVU389
 1369 002a F6E7     		b	.L79
 1370              	.LVL113:
 1371              	.L81:
1270:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1271:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1272:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1273:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase &= ~itmask;
 1372              		.loc 1 1273 5 is_stmt 1 view .LVU390
 1373              		.loc 1 1273 33 is_stmt 0 view .LVU391
 1374 002c 0368     		ldr	r3, [r0]
 1375 002e 23EA0101 		bic	r1, r3, r1
 1376              	.LVL114:
 1377              		.loc 1 1273 33 view .LVU392
 1378 0032 0160     		str	r1, [r0]
1274:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1275:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1379              		.loc 1 1275 1 view .LVU393
 1380 0034 7047     		bx	lr
 1381              		.cfi_endproc
 1382              	.LFE147:
 1384              		.section	.text.USART_GetFlagStatus,"ax",%progbits
 1385              		.align	1
 1386              		.global	USART_GetFlagStatus
 1387              		.syntax unified
 1388              		.thumb
 1389              		.thumb_func
 1391              	USART_GetFlagStatus:
 1392              	.LVL115:
 1393              	.LFB148:
1276:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1277:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1278:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Checks whether the specified USART flag is set or not.
1279:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1280:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1281:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_FLAG: specifies the flag to check.
1282:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1283:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5)
1284:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag
1285:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TXE:  Transmit data register empty flag
1286:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag
1287:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag
1288:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_IDLE: Idle Line detection flag
1289:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_ORE:  OverRun Error flag
1290:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_NE:   Noise Error flag
ARM GAS  /tmp/ccxSMOfF.s 			page 48


1291:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_FE:   Framing Error flag
1292:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_PE:   Parity Error flag
1293:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The new state of USART_FLAG (SET or RESET).
1294:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1295:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1296:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1394              		.loc 1 1296 1 is_stmt 1 view -0
 1395              		.cfi_startproc
 1396              		@ args = 0, pretend = 0, frame = 0
 1397              		@ frame_needed = 0, uses_anonymous_args = 0
 1398              		@ link register save eliminated.
1297:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   FlagStatus bitstatus = RESET;
 1399              		.loc 1 1297 3 view .LVU395
1298:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1299:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1400              		.loc 1 1299 3 view .LVU396
1300:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_FLAG(USART_FLAG));
 1401              		.loc 1 1300 3 view .LVU397
1301:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1302:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1303:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_FLAG == USART_FLAG_CTS)
 1402              		.loc 1 1303 3 view .LVU398
1304:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1305:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
 1403              		.loc 1 1305 5 view .LVU399
1306:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1307:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1308:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 1404              		.loc 1 1308 3 view .LVU400
 1405              		.loc 1 1308 14 is_stmt 0 view .LVU401
 1406 0000 0388     		ldrh	r3, [r0]
 1407              		.loc 1 1308 6 view .LVU402
 1408 0002 1942     		tst	r1, r3
 1409 0004 01D0     		beq	.L87
1309:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1310:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = SET;
 1410              		.loc 1 1310 15 view .LVU403
 1411 0006 0120     		movs	r0, #1
 1412              	.LVL116:
 1413              		.loc 1 1310 15 view .LVU404
 1414 0008 7047     		bx	lr
 1415              	.LVL117:
 1416              	.L87:
1311:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1312:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1313:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1314:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = RESET;
 1417              		.loc 1 1314 15 view .LVU405
 1418 000a 0020     		movs	r0, #0
 1419              	.LVL118:
1315:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1316:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return bitstatus;
 1420              		.loc 1 1316 3 is_stmt 1 view .LVU406
1317:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1421              		.loc 1 1317 1 is_stmt 0 view .LVU407
 1422 000c 7047     		bx	lr
 1423              		.cfi_endproc
ARM GAS  /tmp/ccxSMOfF.s 			page 49


 1424              	.LFE148:
 1426              		.section	.text.USART_ClearFlag,"ax",%progbits
 1427              		.align	1
 1428              		.global	USART_ClearFlag
 1429              		.syntax unified
 1430              		.thumb
 1431              		.thumb_func
 1433              	USART_ClearFlag:
 1434              	.LVL119:
 1435              	.LFB149:
1318:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1319:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1320:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Clears the USARTx's pending flags.
1321:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1322:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1323:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_FLAG: specifies the flag to clear.
1324:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be any combination of the following values:
1325:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5).
1326:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag.
1327:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag.
1328:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag.
1329:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *   
1330:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1331:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          error) and IDLE (Idle line detected) flags are cleared by software 
1332:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          sequence: a read operation to USART_SR register (USART_GetFlagStatus()) 
1333:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          followed by a read operation to USART_DR register (USART_ReceiveData()).
1334:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   RXNE flag can be also cleared by a read to the USART_DR register 
1335:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1336:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TC flag can be also cleared by software sequence: a read operation to 
1337:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          USART_SR register (USART_GetFlagStatus()) followed by a write operation
1338:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          to USART_DR register (USART_SendData()).
1339:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TXE flag is cleared only by a write to the USART_DR register 
1340:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_SendData()).
1341:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *   
1342:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1343:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1344:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1345:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1436              		.loc 1 1345 1 is_stmt 1 view -0
 1437              		.cfi_startproc
 1438              		@ args = 0, pretend = 0, frame = 0
 1439              		@ frame_needed = 0, uses_anonymous_args = 0
 1440              		@ link register save eliminated.
1346:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1347:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1441              		.loc 1 1347 3 view .LVU409
1348:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
 1442              		.loc 1 1348 3 view .LVU410
1349:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1350:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1351:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
 1443              		.loc 1 1351 3 view .LVU411
1352:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1353:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
 1444              		.loc 1 1353 5 view .LVU412
1354:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1355:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        
ARM GAS  /tmp/ccxSMOfF.s 			page 50


1356:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->SR = (uint16_t)~USART_FLAG;
 1445              		.loc 1 1356 3 view .LVU413
 1446              		.loc 1 1356 16 is_stmt 0 view .LVU414
 1447 0000 C943     		mvns	r1, r1
 1448              	.LVL120:
 1449              		.loc 1 1356 16 view .LVU415
 1450 0002 89B2     		uxth	r1, r1
 1451              		.loc 1 1356 14 view .LVU416
 1452 0004 0180     		strh	r1, [r0]	@ movhi
1357:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1453              		.loc 1 1357 1 view .LVU417
 1454 0006 7047     		bx	lr
 1455              		.cfi_endproc
 1456              	.LFE149:
 1458              		.section	.text.USART_GetITStatus,"ax",%progbits
 1459              		.align	1
 1460              		.global	USART_GetITStatus
 1461              		.syntax unified
 1462              		.thumb
 1463              		.thumb_func
 1465              	USART_GetITStatus:
 1466              	.LVL121:
 1467              	.LFB150:
1358:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1359:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1360:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Checks whether the specified USART interrupt has occurred or not.
1361:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1362:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1363:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt source to check.
1364:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1365:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1366:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1367:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1368:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1369:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1370:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1371:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ORE_RX : OverRun Error interrupt if the RXNEIE bit is set
1372:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ORE_ER : OverRun Error interrupt if the EIE bit is set  
1373:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_NE:   Noise Error interrupt
1374:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_FE:   Framing Error interrupt
1375:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1376:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The new state of USART_IT (SET or RESET).
1377:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1378:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
1379:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1468              		.loc 1 1379 1 is_stmt 1 view -0
 1469              		.cfi_startproc
 1470              		@ args = 0, pretend = 0, frame = 0
 1471              		@ frame_needed = 0, uses_anonymous_args = 0
 1472              		@ link register save eliminated.
1380:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 1473              		.loc 1 1380 3 view .LVU419
1381:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ITStatus bitstatus = RESET;
 1474              		.loc 1 1381 3 view .LVU420
1382:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1383:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1475              		.loc 1 1383 3 view .LVU421
ARM GAS  /tmp/ccxSMOfF.s 			page 51


1384:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_GET_IT(USART_IT)); 
 1476              		.loc 1 1384 3 view .LVU422
1385:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1386:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */ 
1387:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
 1477              		.loc 1 1387 3 view .LVU423
1388:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1389:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
 1478              		.loc 1 1389 5 view .LVU424
1390:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1391:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1392:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the USART register index */
1393:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 1479              		.loc 1 1393 3 view .LVU425
 1480              		.loc 1 1393 35 is_stmt 0 view .LVU426
 1481 0000 C1F34212 		ubfx	r2, r1, #5, #3
 1482              	.LVL122:
1394:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the interrupt position */
1395:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = USART_IT & IT_MASK;
 1483              		.loc 1 1395 3 is_stmt 1 view .LVU427
 1484              		.loc 1 1395 10 is_stmt 0 view .LVU428
 1485 0004 01F01F0C 		and	ip, r1, #31
 1486              	.LVL123:
1396:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = (uint32_t)0x01 << itmask;
 1487              		.loc 1 1396 3 is_stmt 1 view .LVU429
 1488              		.loc 1 1396 10 is_stmt 0 view .LVU430
 1489 0008 0123     		movs	r3, #1
 1490 000a 03FA0CF3 		lsl	r3, r3, ip
 1491              	.LVL124:
1397:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1398:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (usartreg == 0x01) /* The IT  is in CR1 register */
 1492              		.loc 1 1398 3 is_stmt 1 view .LVU431
 1493              		.loc 1 1398 6 is_stmt 0 view .LVU432
 1494 000e 012A     		cmp	r2, #1
 1495 0010 0FD0     		beq	.L96
1399:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1400:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR1;
1401:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1402:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (usartreg == 0x02) /* The IT  is in CR2 register */
 1496              		.loc 1 1402 8 is_stmt 1 view .LVU433
 1497              		.loc 1 1402 11 is_stmt 0 view .LVU434
 1498 0012 022A     		cmp	r2, #2
 1499 0014 11D0     		beq	.L97
1403:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1404:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR2;
1405:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1406:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* The IT  is in CR3 register */
1407:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1408:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR3;
 1500              		.loc 1 1408 5 is_stmt 1 view .LVU435
 1501              		.loc 1 1408 21 is_stmt 0 view .LVU436
 1502 0016 828A     		ldrh	r2, [r0, #20]
 1503              	.LVL125:
 1504              		.loc 1 1408 21 view .LVU437
 1505 0018 92B2     		uxth	r2, r2
 1506              		.loc 1 1408 12 view .LVU438
 1507 001a 1340     		ands	r3, r3, r2
ARM GAS  /tmp/ccxSMOfF.s 			page 52


 1508              	.LVL126:
 1509              	.L91:
1409:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1410:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1411:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = USART_IT >> 0x08;
 1510              		.loc 1 1411 3 is_stmt 1 view .LVU439
 1511              		.loc 1 1411 21 is_stmt 0 view .LVU440
 1512 001c 090A     		lsrs	r1, r1, #8
 1513              	.LVL127:
1412:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = (uint32_t)0x01 << bitpos;
 1514              		.loc 1 1412 3 is_stmt 1 view .LVU441
 1515              		.loc 1 1412 10 is_stmt 0 view .LVU442
 1516 001e 0122     		movs	r2, #1
 1517 0020 02FA01F1 		lsl	r1, r2, r1
 1518              	.LVL128:
1413:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos &= USARTx->SR;
 1519              		.loc 1 1413 3 is_stmt 1 view .LVU443
 1520              		.loc 1 1413 19 is_stmt 0 view .LVU444
 1521 0024 0288     		ldrh	r2, [r0]
 1522 0026 92B2     		uxth	r2, r2
 1523              		.loc 1 1413 10 view .LVU445
 1524 0028 0A40     		ands	r2, r2, r1
 1525              	.LVL129:
1414:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 1526              		.loc 1 1414 3 is_stmt 1 view .LVU446
 1527              		.loc 1 1414 6 is_stmt 0 view .LVU447
 1528 002a 53B1     		cbz	r3, .L94
 1529              		.loc 1 1414 34 discriminator 1 view .LVU448
 1530 002c 5AB9     		cbnz	r2, .L95
1415:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1416:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = SET;
1417:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1418:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1419:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1420:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = RESET;
 1531              		.loc 1 1420 15 view .LVU449
 1532 002e 0020     		movs	r0, #0
 1533              	.LVL130:
 1534              		.loc 1 1420 15 view .LVU450
 1535 0030 7047     		bx	lr
 1536              	.LVL131:
 1537              	.L96:
1400:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 1538              		.loc 1 1400 5 is_stmt 1 view .LVU451
1400:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 1539              		.loc 1 1400 21 is_stmt 0 view .LVU452
 1540 0032 8289     		ldrh	r2, [r0, #12]
 1541              	.LVL132:
1400:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 1542              		.loc 1 1400 21 view .LVU453
 1543 0034 92B2     		uxth	r2, r2
1400:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 1544              		.loc 1 1400 12 view .LVU454
 1545 0036 1340     		ands	r3, r3, r2
 1546              	.LVL133:
1400:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 1547              		.loc 1 1400 12 view .LVU455
ARM GAS  /tmp/ccxSMOfF.s 			page 53


 1548 0038 F0E7     		b	.L91
 1549              	.LVL134:
 1550              	.L97:
1404:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 1551              		.loc 1 1404 5 is_stmt 1 view .LVU456
1404:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 1552              		.loc 1 1404 21 is_stmt 0 view .LVU457
 1553 003a 028A     		ldrh	r2, [r0, #16]
 1554              	.LVL135:
1404:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 1555              		.loc 1 1404 21 view .LVU458
 1556 003c 92B2     		uxth	r2, r2
1404:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 1557              		.loc 1 1404 12 view .LVU459
 1558 003e 1340     		ands	r3, r3, r2
 1559              	.LVL136:
1404:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 1560              		.loc 1 1404 12 view .LVU460
 1561 0040 ECE7     		b	.L91
 1562              	.LVL137:
 1563              	.L94:
 1564              		.loc 1 1420 15 view .LVU461
 1565 0042 0020     		movs	r0, #0
 1566              	.LVL138:
 1567              		.loc 1 1420 15 view .LVU462
 1568 0044 7047     		bx	lr
 1569              	.LVL139:
 1570              	.L95:
1416:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 1571              		.loc 1 1416 15 view .LVU463
 1572 0046 0120     		movs	r0, #1
 1573              	.LVL140:
1421:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1422:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1423:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return bitstatus;  
 1574              		.loc 1 1423 3 is_stmt 1 view .LVU464
1424:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1575              		.loc 1 1424 1 is_stmt 0 view .LVU465
 1576 0048 7047     		bx	lr
 1577              		.cfi_endproc
 1578              	.LFE150:
 1580              		.section	.text.USART_ClearITPendingBit,"ax",%progbits
 1581              		.align	1
 1582              		.global	USART_ClearITPendingBit
 1583              		.syntax unified
 1584              		.thumb
 1585              		.thumb_func
 1587              	USART_ClearITPendingBit:
 1588              	.LVL141:
 1589              	.LFB151:
1425:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1426:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1427:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Clears the USARTx's interrupt pending bits.
1428:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1429:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1430:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the interrupt pending bit to clear.
1431:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
ARM GAS  /tmp/ccxSMOfF.s 			page 54


1432:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1433:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1434:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt. 
1435:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt.
1436:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
1437:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1438:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          error) and IDLE (Idle line detected) pending bits are cleared by 
1439:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          software sequence: a read operation to USART_SR register 
1440:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_GetITStatus()) followed by a read operation to USART_DR register 
1441:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1442:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   RXNE pending bit can be also cleared by a read to the USART_DR register 
1443:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1444:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TC pending bit can be also cleared by software sequence: a read 
1445:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          operation to USART_SR register (USART_GetITStatus()) followed by a write 
1446:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          operation to USART_DR register (USART_SendData()).
1447:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TXE pending bit is cleared only by a write to the USART_DR register 
1448:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_SendData()).
1449:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *  
1450:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1451:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1452:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
1453:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1590              		.loc 1 1453 1 is_stmt 1 view -0
 1591              		.cfi_startproc
 1592              		@ args = 0, pretend = 0, frame = 0
 1593              		@ frame_needed = 0, uses_anonymous_args = 0
 1594              		@ link register save eliminated.
1454:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint16_t bitpos = 0x00, itmask = 0x00;
 1595              		.loc 1 1454 3 view .LVU467
1455:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1456:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1596              		.loc 1 1456 3 view .LVU468
1457:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_IT(USART_IT)); 
 1597              		.loc 1 1457 3 view .LVU469
1458:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1459:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1460:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
 1598              		.loc 1 1460 3 view .LVU470
1461:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1462:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
 1599              		.loc 1 1462 5 view .LVU471
1463:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1464:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1465:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = USART_IT >> 0x08;
 1600              		.loc 1 1465 3 view .LVU472
 1601              		.loc 1 1465 10 is_stmt 0 view .LVU473
 1602 0000 090A     		lsrs	r1, r1, #8
 1603              	.LVL142:
1466:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 1604              		.loc 1 1466 3 is_stmt 1 view .LVU474
 1605              		.loc 1 1466 28 is_stmt 0 view .LVU475
 1606 0002 0123     		movs	r3, #1
 1607 0004 8B40     		lsls	r3, r3, r1
 1608              		.loc 1 1466 10 view .LVU476
 1609 0006 9BB2     		uxth	r3, r3
 1610              	.LVL143:
1467:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->SR = (uint16_t)~itmask;
ARM GAS  /tmp/ccxSMOfF.s 			page 55


 1611              		.loc 1 1467 3 is_stmt 1 view .LVU477
 1612              		.loc 1 1467 16 is_stmt 0 view .LVU478
 1613 0008 DB43     		mvns	r3, r3
 1614              	.LVL144:
 1615              		.loc 1 1467 16 view .LVU479
 1616 000a 9BB2     		uxth	r3, r3
 1617              	.LVL145:
 1618              		.loc 1 1467 14 view .LVU480
 1619 000c 0380     		strh	r3, [r0]	@ movhi
1468:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1620              		.loc 1 1468 1 view .LVU481
 1621 000e 7047     		bx	lr
 1622              		.cfi_endproc
 1623              	.LFE151:
 1625              		.text
 1626              	.Letext0:
 1627              		.file 2 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/machine/_default_types.h"
 1628              		.file 3 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/_stdint.h"
 1629              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1630              		.file 5 "Drivers/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h"
 1631              		.file 6 "Drivers/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_usart.h"
ARM GAS  /tmp/ccxSMOfF.s 			page 56


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_usart.c
     /tmp/ccxSMOfF.s:20     .text.USART_DeInit:0000000000000000 $t
     /tmp/ccxSMOfF.s:26     .text.USART_DeInit:0000000000000000 USART_DeInit
     /tmp/ccxSMOfF.s:208    .text.USART_DeInit:00000000000000dc $d
     /tmp/ccxSMOfF.s:220    .text.USART_Init:0000000000000000 $t
     /tmp/ccxSMOfF.s:226    .text.USART_Init:0000000000000000 USART_Init
     /tmp/ccxSMOfF.s:461    .text.USART_Init:00000000000000c4 $d
     /tmp/ccxSMOfF.s:467    .text.USART_StructInit:0000000000000000 $t
     /tmp/ccxSMOfF.s:473    .text.USART_StructInit:0000000000000000 USART_StructInit
     /tmp/ccxSMOfF.s:508    .text.USART_ClockInit:0000000000000000 $t
     /tmp/ccxSMOfF.s:514    .text.USART_ClockInit:0000000000000000 USART_ClockInit
     /tmp/ccxSMOfF.s:570    .text.USART_ClockStructInit:0000000000000000 $t
     /tmp/ccxSMOfF.s:576    .text.USART_ClockStructInit:0000000000000000 USART_ClockStructInit
     /tmp/ccxSMOfF.s:603    .text.USART_Cmd:0000000000000000 $t
     /tmp/ccxSMOfF.s:609    .text.USART_Cmd:0000000000000000 USART_Cmd
     /tmp/ccxSMOfF.s:643    .text.USART_SetPrescaler:0000000000000000 $t
     /tmp/ccxSMOfF.s:649    .text.USART_SetPrescaler:0000000000000000 USART_SetPrescaler
     /tmp/ccxSMOfF.s:675    .text.USART_OverSampling8Cmd:0000000000000000 $t
     /tmp/ccxSMOfF.s:681    .text.USART_OverSampling8Cmd:0000000000000000 USART_OverSampling8Cmd
     /tmp/ccxSMOfF.s:714    .text.USART_OneBitMethodCmd:0000000000000000 $t
     /tmp/ccxSMOfF.s:720    .text.USART_OneBitMethodCmd:0000000000000000 USART_OneBitMethodCmd
     /tmp/ccxSMOfF.s:754    .text.USART_SendData:0000000000000000 $t
     /tmp/ccxSMOfF.s:760    .text.USART_SendData:0000000000000000 USART_SendData
     /tmp/ccxSMOfF.s:782    .text.USART_ReceiveData:0000000000000000 $t
     /tmp/ccxSMOfF.s:788    .text.USART_ReceiveData:0000000000000000 USART_ReceiveData
     /tmp/ccxSMOfF.s:808    .text.USART_SetAddress:0000000000000000 $t
     /tmp/ccxSMOfF.s:814    .text.USART_SetAddress:0000000000000000 USART_SetAddress
     /tmp/ccxSMOfF.s:843    .text.USART_ReceiverWakeUpCmd:0000000000000000 $t
     /tmp/ccxSMOfF.s:849    .text.USART_ReceiverWakeUpCmd:0000000000000000 USART_ReceiverWakeUpCmd
     /tmp/ccxSMOfF.s:883    .text.USART_WakeUpConfig:0000000000000000 $t
     /tmp/ccxSMOfF.s:889    .text.USART_WakeUpConfig:0000000000000000 USART_WakeUpConfig
     /tmp/ccxSMOfF.s:918    .text.USART_LINBreakDetectLengthConfig:0000000000000000 $t
     /tmp/ccxSMOfF.s:924    .text.USART_LINBreakDetectLengthConfig:0000000000000000 USART_LINBreakDetectLengthConfig
     /tmp/ccxSMOfF.s:953    .text.USART_LINCmd:0000000000000000 $t
     /tmp/ccxSMOfF.s:959    .text.USART_LINCmd:0000000000000000 USART_LINCmd
     /tmp/ccxSMOfF.s:993    .text.USART_SendBreak:0000000000000000 $t
     /tmp/ccxSMOfF.s:999    .text.USART_SendBreak:0000000000000000 USART_SendBreak
     /tmp/ccxSMOfF.s:1020   .text.USART_HalfDuplexCmd:0000000000000000 $t
     /tmp/ccxSMOfF.s:1026   .text.USART_HalfDuplexCmd:0000000000000000 USART_HalfDuplexCmd
     /tmp/ccxSMOfF.s:1060   .text.USART_SetGuardTime:0000000000000000 $t
     /tmp/ccxSMOfF.s:1066   .text.USART_SetGuardTime:0000000000000000 USART_SetGuardTime
     /tmp/ccxSMOfF.s:1092   .text.USART_SmartCardCmd:0000000000000000 $t
     /tmp/ccxSMOfF.s:1098   .text.USART_SmartCardCmd:0000000000000000 USART_SmartCardCmd
     /tmp/ccxSMOfF.s:1132   .text.USART_SmartCardNACKCmd:0000000000000000 $t
     /tmp/ccxSMOfF.s:1138   .text.USART_SmartCardNACKCmd:0000000000000000 USART_SmartCardNACKCmd
     /tmp/ccxSMOfF.s:1172   .text.USART_IrDAConfig:0000000000000000 $t
     /tmp/ccxSMOfF.s:1178   .text.USART_IrDAConfig:0000000000000000 USART_IrDAConfig
     /tmp/ccxSMOfF.s:1207   .text.USART_IrDACmd:0000000000000000 $t
     /tmp/ccxSMOfF.s:1213   .text.USART_IrDACmd:0000000000000000 USART_IrDACmd
     /tmp/ccxSMOfF.s:1247   .text.USART_DMACmd:0000000000000000 $t
     /tmp/ccxSMOfF.s:1253   .text.USART_DMACmd:0000000000000000 USART_DMACmd
     /tmp/ccxSMOfF.s:1295   .text.USART_ITConfig:0000000000000000 $t
     /tmp/ccxSMOfF.s:1301   .text.USART_ITConfig:0000000000000000 USART_ITConfig
     /tmp/ccxSMOfF.s:1385   .text.USART_GetFlagStatus:0000000000000000 $t
     /tmp/ccxSMOfF.s:1391   .text.USART_GetFlagStatus:0000000000000000 USART_GetFlagStatus
     /tmp/ccxSMOfF.s:1427   .text.USART_ClearFlag:0000000000000000 $t
ARM GAS  /tmp/ccxSMOfF.s 			page 57


     /tmp/ccxSMOfF.s:1433   .text.USART_ClearFlag:0000000000000000 USART_ClearFlag
     /tmp/ccxSMOfF.s:1459   .text.USART_GetITStatus:0000000000000000 $t
     /tmp/ccxSMOfF.s:1465   .text.USART_GetITStatus:0000000000000000 USART_GetITStatus
     /tmp/ccxSMOfF.s:1581   .text.USART_ClearITPendingBit:0000000000000000 $t
     /tmp/ccxSMOfF.s:1587   .text.USART_ClearITPendingBit:0000000000000000 USART_ClearITPendingBit

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
